<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xorg | 대체로 무해함</title>
    <link>https://lethean.github.io/tags/xorg/</link>
      <atom:link href="https://lethean.github.io/tags/xorg/index.xml" rel="self" type="application/rss+xml" />
    <description>Xorg</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Mon, 02 Jul 2012 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Xorg</title>
      <link>https://lethean.github.io/tags/xorg/</link>
    </image>
    
    <item>
      <title>X 윈도우 마우스 포인터 장벽(barrier)</title>
      <link>https://lethean.github.io/2012/07/02/mouse-pointer-barriers-in-x-window/</link>
      <pubDate>Mon, 02 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2012/07/02/mouse-pointer-barriers-in-x-window/</guid>
      <description>&lt;p&gt;그놈3 데스크탑 환경을 사용할때 불편했던 점 중 하나는,  프로그램을 실행하는 등의 창 작업을 위해 화면 상단 왼쪽 구석으로 마우스를 이동했을때 듀얼 모니터에서 마우스가 미끌어져 버리는 현상이었습니다. 그런데, 어느 날부터인가 이 현상, 즉 마우스를 화면 구석으로 이동해도 마우스가 다음 모니터로 미끌어져 넘어가는 현상이 발생하지 않았습니다. 제가 &amp;lsquo;어느 날&amp;rsquo;이라는 표현을 사용한 이유는, 
&lt;a href=&#34;https://lethean.github.io/2011/02/21/migrated-to-arch-linux/&#34;&gt;아치 리눅스로 이전&lt;/a&gt;
한 이후로 아직까지 한 번도 시스템을 재설치하지 않고, 생각날 때마다 최소 2~3일에 한 번씩 패키지를 업그레이드하는 습관 때문입니다.&lt;/p&gt;
&lt;p&gt;그러다가 최근 
&lt;a href=&#34;http://lwn.net/Articles/500747/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LWN.net의 X11R7.7 릴리스 기사&lt;/a&gt;
에서 이런 내용을 읽게 되었습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pointer barriers&lt;/strong&gt; were added by X Fixes extension Version 5.0. Compositing managers and desktop environments may have UI elements in particular screen locations such that for a single-headed display they correspond to easy targets, for example, the top left corner. For a multi-headed environment these corners should still be semi-impermeable. Pointer barriers allow the application to define additional constraint on cursor motion so that these areas behave as expected even in the face of multiple displays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;즉, X Fixes 확장 기능 5.0 버전에 포인터 장벽(?)이라는게 추가되었는데, 어플리케이션이 커서 움직임에 제한을 더할 수 있도록 했다는 겁니다. 그리고 이를 이용하면 바로 정확하게 제가 경험한 것과 같은 멀티 모니터에서의 구석 마우스 미끄러짐 현상을 없앨 수 있다는 점도 부연하고 있습니다.&lt;/p&gt;
&lt;p&gt;사실 비슷한 문제가 제가 회사에서 개발 중인 프로그램에서도 발생하고 있었기 때문에 이 기능에 관심이 안 갈 수가 없었습니다. 그래서 조금 더 정확하게 확인하기 위해 그놈 셸 소스 코드를 조사했더니 아니나 다를까, 패널 박스 크기가 변경될때마다(&amp;ldquo;allocation-changed&amp;rdquo;) 호출되는 
&lt;a href=&#34;http://git.gnome.org/browse/gnome-shell/tree/js/ui/layout.js#n171&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;_updatePanelBarriers()&lt;/code&gt;&lt;/a&gt;
 함수가 그 역할을 하고 있습니다. (
&lt;a href=&#34;http://git.gnome.org/browse/gnome-shell/commit/js/ui/layout.js?id=021d3dadbb63676c1ac9496ecbb0b80ce2eb6dfe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2011년 7월 25일에 작성된 코드&lt;/a&gt;
군요&amp;hellip;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;_updatePanelBarriers: function() {
    if (this._leftPanelBarrier)
        global.destroy_pointer_barrier(this._leftPanelBarrier);
    if (this._rightPanelBarrier)
        global.destroy_pointer_barrier(this._rightPanelBarrier);

    if (this.panelBox.height) {
        let primary = this.primaryMonitor;
        this._leftPanelBarrier =
            global.create_pointer_barrier(primary.x, primary.y,
                                          primary.x, primary.y + this.panelBox.height,
                                          1 /* BarrierPositiveX */);
        this._rightPanelBarrier =
            global.create_pointer_barrier(primary.x + primary.width, primary.y,
                                          primary.x + primary.width, primary.y + this.panelBox.height,
                                          4 /* BarrierNegativeX */);
    } else {
        this._leftPanelBarrier = 0;
        this._rightPanelBarrier = 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 자바스크립트 코드가 호출하는 
&lt;a href=&#34;http://git.gnome.org/browse/gnome-shell/tree/src/shell-global.c#n1010&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;실제 C 함수 코드&lt;/a&gt;
는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/**
 * shell_global_create_pointer_barrier:
 * @global: a #ShellGlobal
 * @x1: left X coordinate
 * @y1: top Y coordinate
 * @x2: right X coordinate
 * @y2: bottom Y coordinate
 * @directions: The directions we&#39;re allowed to pass through
 *
 * If supported by X creates a pointer barrier.
 *
 * Return value: value you can pass to shell_global_destroy_pointer_barrier()
 */
guint32
shell_global_create_pointer_barrier (ShellGlobal *global,
                                     int x1, int y1, int x2, int y2,
                                     int directions)
{
#if HAVE_XFIXESCREATEPOINTERBARRIER
  return (guint32)
    XFixesCreatePointerBarrier (global-&amp;gt;xdisplay,
                                DefaultRootWindow (global-&amp;gt;xdisplay),
                                x1, y1,
                                x2, y2,
                                directions,
                                0, NULL);
#else
  return 0;
#endif
}

/**
 * shell_global_destroy_pointer_barrier:
 * @global: a #ShellGlobal
 * @barrier: a pointer barrier
 *
 * Destroys the @barrier created by shell_global_create_pointer_barrier().
 */
void
shell_global_destroy_pointer_barrier (ShellGlobal *global, guint32 barrier)
{
#if HAVE_XFIXESCREATEPOINTERBARRIER
  g_return_if_fail (barrier &amp;gt; 0);

  XFixesDestroyPointerBarrier (global-&amp;gt;xdisplay, (PointerBarrier)barrier);
#endif
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;XFixesCreatePointerBarrier()&lt;/code&gt; / &lt;code&gt;XFixesDestroyPointerBarrier()&lt;/code&gt; 함수에 대한 더 자세한 사용법을 확인하기 위해 
&lt;a href=&#34;http://www.x.org/releases/X11R7.7/doc/fixesproto/fixesproto.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XFIXES 공식 프로토콜 문서&lt;/a&gt;
를 확인해 보니 마지막에 다음과 같은 API 설명이 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;12. Pointer Barriers

...

12.1 Types

    BARRIER:    XID

    BarrierDirections

        BarrierPositiveX:       1 &amp;lt;&amp;lt; 0
        BarrierPositiveY:       1 &amp;lt;&amp;lt; 1
        BarrierNegativeX:       1 &amp;lt;&amp;lt; 2
        BarrierNegativeY:       1 &amp;lt;&amp;lt; 3

12.3 Requests

CreatePointerBarrier

        barrier:            BARRIER
        drawable:           DRAWABLE
        x1, y2, x2, y2:         INT16
        directions:         CARD32
        devices:            LISTofDEVICEID

    Creates a pointer barrier along the line specified by the given
    coordinates on the screen associated with the given drawable.  The
    barrier has no spatial extent; it is simply a line along the left
    or top edge of the specified pixels.  Barrier coordinates are in
    screen space.

    The coordinates must be axis aligned, either x1 == x2, or
    y1 == y2, but not both.  The varying coordinates may be specified
    in any order.  For x1 == x2, either y1 &amp;gt; y2 or y1 &amp;lt; y2 is valid.
    If the coordinates are not valid BadValue is generated.

    Motion is allowed through the barrier in the directions specified:
    setting the BarrierPositiveX bit allows travel through the barrier
    in the positive X direction, etc.  Nonsensical values (forbidding Y
    axis travel through a vertical barrier, for example) and excess set
    bits are ignored.

    If the server supports the X Input Extension version 2 or higher,
    the devices element names a set of master device to apply the
    barrier to.  If XIAllDevices or XIAllMasterDevices are given, the
    barrier applies to all master devices.  If a slave device is named,
    BadDevice is generated; this does not apply to slave devices named
    implicitly by XIAllDevices.  Naming a device multiple times is
    legal, and is treated as though it were named only once.  If a
    device is removed, the barrier continues to apply to the remaining
    devices, but will not apply to any future device with the same ID
    as the removed device.  Nothing special happens when all matching
    devices are removed; barriers must be explicitly destroyed.

    Errors: IDChoice, Window, Value, Device

DestroyPointerBarrier

        barrier:            BARRIER

    Destroys the named barrier.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;포인터 장벽은 반드시 화면 구석에서만 사용할 수 있는 게 아니라 화면 어느 곳에나 생성할 수 있으며, 장벽 생성시 지정한 방향(direction)으로만 마우스 커서가 이동할 수 있도록 허용합니다. 다시 말해 마우스 커서가 반대 방향으로는 장벽을 넘어갈 수 없게 합니다.방향과 함께 장벽의 영역 좌표를 지정해야 하는데, 예를 들어 왼쪽에서 오른쪽이라면 Y 좌표값만 다르고 X 좌표값을 동일하게 지정해야 합니다. 즉, 세로로 장벽 선을 그리면 됩니다. 그런데, 사실 화면 구석에서는 원하는 대로 동작하는데, 화면 임의의 위치에 포인터 장벽을 생성해 보면 마우스 커서의 대각선 움직임 등은 허용하기 때문에 아주 정확하게 원하는 대로 동작하지 않을 수도 있습니다.&lt;/p&gt;
&lt;p&gt;참고로 상위 툴킷에서 X 윈도우 API 호출에 사용하는 Display, Window 핸들을 얻으려면, Clutter의 경우 
&lt;a href=&#34;http://developer.gnome.org/clutter/stable/clutter-X11-Specific-Support.html#clutter-x11-get-default-display&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;clutter_x11_get_default_display()&lt;/code&gt;&lt;/a&gt;
 / 
&lt;a href=&#34;http://developer.gnome.org/clutter/stable/clutter-X11-Specific-Support.html#clutter-x11-get-stage-window&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;clutter_x11_get_stage_window()&lt;/code&gt;&lt;/a&gt;
 또는 
&lt;a href=&#34;http://developer.gnome.org/clutter/stable/clutter-X11-Specific-Support.html#clutter-x11-get-root-window&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;clutter_x11_get_root_window()&lt;/code&gt;&lt;/a&gt;
 함수를 이용하면 됩니다. GTK+ 역시 GDK 관련 API를 뒤져 보시면 됩니다. ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>모니터 없이 X 서버 실행 후 나중에 모니터 연결해도 화면이 안보인다면</title>
      <link>https://lethean.github.io/2012/01/29/setup-new-connected-monitors-automatically-after-starting-x-server-without-connected-monitors/</link>
      <pubDate>Sun, 29 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2012/01/29/setup-new-connected-monitors-automatically-after-starting-x-server-without-connected-monitors/</guid>
      <description>&lt;p&gt;제목이 조금 길지만, 이 글의 내용은 제목 그대로입니다. (참고로, 이 글은 최근 인텔 그래픽 칩셋을 대상으로 작성되었습니다. 즉, 다른 그래픽 칩셋 드라이버는 어떻게 동작하는지 확인을 안 해 보았다는 의미입니다)&lt;/p&gt;
&lt;p&gt;요즘 X 서버는 연결된 모니터가 없고, &lt;code&gt;/etc/X11/xorg.conf&lt;/code&gt; 파일에 수직/수평 주파수가 정의되어 있지 않다고 하더라도 일단 정상적으로 실행됩니다. 다만, 초기 해상도가 320x200 처럼 매우 작을 수 있습니다. 그런데 나중에 필요에 의해 모니터를 연결했는데 화면이 보이지 않는 경우가 발생합니다. 이 경우, 네트웍으로 접속해서 다음 명령어를 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export DISPLAY=:0.0
$ xrandr --auto
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그러면 X 서버가 알아서 연결되어 있는 모니터를 출력으로 재설정하고 가장 선호하는(preferred) 해상도와 주파수를 선택합니다. 그런데 이를 자동으로 동작하게 하려면 udev 데몬의 도움을 받아야 합니다. 그래서 &lt;code&gt;/etc/udev/rules.d&lt;/code&gt; 디렉토리에 확장자가 &lt;code&gt;&#39;.rules&#39;&lt;/code&gt;인 파일을 생성하고 다음과 같이 내용을 채웁니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ACTION==&amp;quot;change&amp;quot;, SUBSYSTEM==&amp;quot;drm&amp;quot;, KERNEL==&amp;quot;card*&amp;quot;, RUN+=&amp;quot;/usr/bin/auto-xrandr.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 &lt;code&gt;/usr/bin/auto-xrandr.sh&lt;/code&gt; 파일을 아래와 같이 작성한뒤 실행권한을 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
[ &amp;quot;$DISPLAY&amp;quot; = &amp;quot;&amp;quot; ] &amp;amp;&amp;amp; export DISPLAY=:0.0
xrandr --auto
xrandr --dpi 96
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그러면 이제부터 모니터 연결시 자동으로 연결을 재설정하게 됩니다.&lt;/p&gt;
&lt;p&gt;그런데, 만일 네트웍으로 접속했거나, udev 데몬에 의해 실행되는 경우 X 서버 인증이 안된 계정이라며 &lt;code&gt;xrandr&lt;/code&gt; 명령이 실행이 거부됩니다. 이를 제대로 처리하려면 복잡한 인증 과정이 필요한데, 이를 쉽게 처리하려면 그냥 X 서버 시작할때 자동으로 실행되는 초기화 스크립트에 &lt;code&gt;&#39;xhost +&#39;&lt;/code&gt; 명령어를 주면 인증을 무시하게 됩니다. 물론 보안상 좋은 방법은 아니지만, 폐쇠된 환경이라면 별로 문제가 없을 겁니다.&lt;/p&gt;
&lt;p&gt;각각의 명령어에 대해 더 궁금하신 분은 관련 명령어 매뉴얼 페이지를 확인해 보시기 바랍니다.&lt;/p&gt;
&lt;p&gt;참고로 조금만 더 설명하면, 노트북 외부 모니터 단자에 빔 프로젝트나 외부 모니터를 연결했을 경우도 xrandr 명령을 직접 사용하거나 지금까지 설명한 방법을 조금 다르게 응용할 수 있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>여러 개의 마우스 동시에 사용하기</title>
      <link>https://lethean.github.io/2010/01/20/using-multiple-mouses-with-xor/</link>
      <pubDate>Wed, 20 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2010/01/20/using-multiple-mouses-with-xor/</guid>
      <description>&lt;p&gt;구글 리더에서 오늘치 내용을 읽다가 &amp;lsquo;가
&lt;a href=&#34;http://ao2.it/en/blog/2010/01/19/poor-mans-multi-touch-using-multiple-mice-xorg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;난한 사람의 멀티 터치: Xorg에서 여러 개의 마우스 사용하기&lt;/a&gt;
&amp;rsquo; 블로그를 보고 따라해 보았더니 바로 되는 걸 확인하고 기록으로 남겨둡니다. (참고로, 제가 사용하는 배포판은 우분투 개발 버전(lucid)입니다)&lt;/p&gt;
&lt;p&gt;두 개의 마우스를 장착했을때 두 개의 포인터가 생성되고, 각각 따로 동작하는 것은 물론 마우스 별로 커서를 지정할 수도 있습니다. 하지만 아직 GTK+를 비롯한 많은 어플리케이션이 멀티 마우스를 고려하지 않아 창 이동이나 포커스 등과 같은 문제가 원하는 대로 동작하지는 않지만, 언제나 그렇듯이 시간이 지나면 조금씩 나아지리라 생각됩니다.&lt;/p&gt;
&lt;p&gt;저자는 자신이 GIMP 작업을 할 때 하나는 도구나 색상을 고르고, 다른 하나는 그리기 작업에 사용함으로 실제 도움이 많이 되고 있다고 하는데, 단순히 하나의 컴퓨터 화면을 여러 사람이 동시에 사용할 수 있다는 점보다, 사용자 인터페이스 관점에서 멀티 터치를 비롯한 많은 아이디어가 X 어플리케이션에 적용할 수 있는 기반이 될 것으로 여겨집니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>X 윈도우 비디오 가속(VA) API</title>
      <link>https://lethean.github.io/2009/07/13/x-window-video-acceleration-api-overview/</link>
      <pubDate>Mon, 13 Jul 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/07/13/x-window-video-acceleration-api-overview/</guid>
      <description>&lt;p&gt;기존 X 윈도우 프로그래밍에서 하드웨어 가속 기능을 이용하여  YUV 형식의 비디오를 재생하거나 MPEG2 코덱을 디코딩하려면  
&lt;a href=&#34;http://en.wikipedia.org/wiki/X_video_extension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xv (X Video)&lt;/a&gt;
와 
&lt;a href=&#34;http://en.wikipedia.org/wiki/X-Video_Motion_Compensation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XvMC (X Video Motion Compensation)&lt;/a&gt;
 확장(extension) API를 사용해야 합니다. 하지만 몇년 전부터 이러한 X 윈도우 확장 API의 한계를 벗어나기 위해 업체별로 각각 별도의 API 라이브러리를 제공하고 있는데, 인텔의 
&lt;a href=&#34;http://en.wikipedia.org/wiki/Video_Acceleration_API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VA (Video Acceleration) API&lt;/a&gt;
, NVIDIA의  
&lt;a href=&#34;http://en.wikipedia.org/wiki/VDPAU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VDPAU (Video Decode and Presentation API for Unix)&lt;/a&gt;
, ATI의 
&lt;a href=&#34;http://en.wikipedia.org/wiki/X-Video_Bitstream_Acceleration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XvBA (X-Video Bitstream Acceleration)&lt;/a&gt;
 API 등이 그 예입니다. (물론 이를 지원하는 최신 그래픽카드 칩셋이 장착되어 있어야 하는데, 인텔의 경우 G45 칩셋부터 가능하다고 합니다) 참고로 CPU 점유율 66.3 ~ 98.4% 정도를 사용하는 고해상도 H.264 / VC1 비디오 재생이 하드웨어 가속 기능을 이용하면 0.6% 이하로 낮아진다는 
&lt;a href=&#34;http://gwenole.beauchesne.info/en/blog/2009/06/22/video_decode_acceleration_benchmarks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;벤치마킹 결과&lt;/a&gt;
도 있습니다.&lt;/p&gt;
&lt;p&gt;이러한 여러 업체의 독자적인 API가, 
&lt;a href=&#34;http://lwn.net/Articles/339349/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LWN 기사&lt;/a&gt;
에서 정리한 것처럼, 이제는 인텔 API로 통합되어 가고 있습니다.  VDPAU / XvBA 기능이 VA API의 백엔드(backend)로 구현하는 작업이 진행되고 있어 VA API만 지원해도 응용 프로그램은 쉽게 다른 업체의 하드웨어 가속 기능을 사용할 수 있게 되는 것입니다. 물론 MPlayer, FFmpeg, VLC 같은 대표적인 비디오 관련 응용 프로그램은 VA API를 이미 지원하거나 지원하기 위해 준비하고 있습니다.&lt;/p&gt;
&lt;p&gt;VA API는 비디오 디코딩 뿐 아니라 기존 Xv 확장 API에서 처리하던 색상 공간 변환 (color space conversion), 감마 교정 (gamma correction), 확대 (scaling) 외에 기타 비디오 작업을 처리합니다. 게다가 앞으로는 인텔에서 제공하는 하드웨어 가속 인코딩 기능까지 지원할 예정인 것 같습니다. (2009년 하반기에 발표할 예정인 인텔 Moorestown 모바일 플랫폼에서 지원하는 것 같습니다) 더 나아가 클러터(Clutter) 같은 툴킷 라이브러리에서 직접 사용할 수 있도록 OpenGL 텍스쳐(texture)에 직접 렌더링하는 기능도 지원할 예정이라는군요.&lt;/p&gt;
&lt;p&gt;그래픽 하드웨어 칩셋의 인코더 / 디코더 기능을 이용하는 기능은 얼핏 리눅스 커널 V4L2 기반의 하드웨어 인코더 / 디코더 API와 중복된다는 느낌도 있지만, VA API는 디코딩한 데이터가 바로 그래픽 카드 프레임 버퍼에 저장되어 표시되기 때문에 별도의 디스플레이 과정이 불필요하다는 점이 다릅니다. 또한 인코더 / 디코더 보드는 대부분 다채널 동시 인코딩 / 디코딩을 지원하지만, VA API는 한 번에 하나의 비디오만 처리할 수 있다는 점도 다릅니다.&lt;/p&gt;
&lt;p&gt;아직은 모두 오픈소스가 아닌 업체가 제공하는 바이너리 X 윈도우 드라이버에서만 동작하는 것 같지만, 나중에 분명 필요하게 될 때가 있을 것 같으니, VA API 사용법도 한 번 둘러봐야 할 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>X 윈도우 자동 로그인하기</title>
      <link>https://lethean.github.io/2008/07/21/x-window-auto-login/</link>
      <pubDate>Mon, 21 Jul 2008 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2008/07/21/x-window-auto-login/</guid>
      <description>&lt;p&gt;GDM 등과 같이 덩치가 큰 디스플레이 관리자를 사용하지 않고, 시스템 부팅후 자동으로 X 서버를 실행하고 특정 계정으로 로그인한뒤 자동으로 특정 프로그램을 실행하는 기능은 의외로 많이 사용합니다. 이 글에서는 여러가지 방법 중에 제가 알고 있는 몇가지 방법을 정리해 보았습니다. 적용 가능한 배포판은 데비안(Debian) 혹은 우분투(Ubuntu) 리눅스 기반입니다.&lt;/p&gt;
&lt;h3 id=&#34;첫번째-방법---init-데몬-이용하기&#34;&gt;첫번째 방법 - init 데몬 이용하기&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;
&lt;a href=&#34;http://www.enricozini.org/2008/tips/lightweight-autologin.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to autologin X without a display manager&lt;/a&gt;
&amp;rdquo; 글에서 설명하는 방법입니다.&lt;/p&gt;
&lt;p&gt;먼저 init 데몬이 자동으로 실행할 수 있도록 &lt;code&gt;/etc/inittab&lt;/code&gt; 파일에 다음 항목을 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;6:23:respawn:/sbin/getty -L -n -l /usr/local/sbin/autologin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 항목은 시스템 시작시 자동으로 &lt;code&gt;/usr/local/sbin/autologin&lt;/code&gt; 프로그램을 실행합니다. 또한 프로그램이 종료해도 다시 자동으로 재시작합니다. 이제 사용자 로그인 과정을 자동으로 수행하도록 하려면 &lt;code&gt;/usr/local/sbin/autologin&lt;/code&gt; 프로그램을 다음과 같이 작성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
/bin/login -f root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;-f&lt;/code&gt; 뒤에 로그인할 계정을 적어줍니다. 이제 계정 홈 디렉토리에 있는 셸 스크립트 시작 파일(&lt;code&gt;~/.bash_profile&lt;/code&gt;)을 수정해서 마지막에 다음 항목을 넣어줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;startx
logout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 스크립트는 X 서버를 시작하고 종료시 자동으로 로그아웃을 합니다. 마지막으로 X 서버가 실행하면서 자동으로 수행될 스크립트를 만들어야 합니다. 계정 홈 디렉토리에 있는 X 서버 시작 파일(&lt;code&gt;~/.xsession&lt;/code&gt; 또는 &lt;code&gt;~/.xinitrc&lt;/code&gt;)을 다음과 같이 작성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
my-window-manager &amp;amp;

# If the touch screen is not calibrated, run the calibration
while [ ! -f /etc/touchscreen-calibration ]
do
  calibrate-touchscreen
done

# Run the main application: if it ends, the session ends
main-application
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;제일 먼저 창 관리자(여기서는 &amp;lsquo;my-window-manager&amp;rsquo;)를 백그라운드로 실행합니다. 그리고 필요한 선행작업(여기서는 &amp;lsquo;calibrate-touchscreen&amp;rsquo;)을 처리한 뒤 실제 어플리케이션(main-application)을 실행합니다.&lt;/p&gt;
&lt;h3 id=&#34;두번째-방법---upstart-데몬-이용하기&#34;&gt;두번째 방법 - upstart 데몬 이용하기&lt;/h3&gt;
&lt;p&gt;우분투 리눅스는 init 데몬 대신 
&lt;a href=&#34;http://upstart.ubuntu.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Upstart&lt;/a&gt;
 데몬을 이용하여 시스템 초기화 작업을 처리합니다. 따라서 첫번째 방법에서 &lt;code&gt;/etc/inittab&lt;/code&gt; 파일을 수정하는 대신 &lt;code&gt;/etc/event.d/&lt;/code&gt; 디렉토리에 시작 파일을 등록해야 합니다. 예를 들면 &lt;code&gt;/etc/event.d/autostart&lt;/code&gt; 파일을 다음과 같이 작성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start on runlevel 2
start on runlevel 6
respawn
exec /sbin/getty -L -n -l /usr/local/sbin/autologin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 내용은 런레벨 2,6 에서 해당 프로그램을 실행하고 종료시 자동으로 재시작하도록 합니다. 나머지는 첫번째 방법과 동일합니다.&lt;/p&gt;
&lt;h3 id=&#34;세번째-방법---런레벨run-level-이용하기&#34;&gt;세번째 방법 - 런레벨(run-level) 이용하기&lt;/h3&gt;
&lt;p&gt;init 데몬이든 Upstart 데몬이든 상관없이 동작하는 방법입니다. 먼저 다음과 같은 스크립트를 &lt;code&gt;/etc/init.d/autologin&lt;/code&gt; 파일로 만들어 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
/usr/local/sbin/my-startx &amp;amp;
exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 런레벨 2로 동작한다는 가정하에 스크립트가 자동 실행할 수 있도록 다음 명령을 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# chmod +x /etc/init.d/autologin
# update-rc.d autologin defaults 05
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 마지막 &amp;lsquo;05&amp;rsquo;는 런레벨에서 다른 데몬보다 먼저 실행하도록 결정해주는 우선순위입니다. 이제 &lt;code&gt;/usr/local/sbin/my-startx&lt;/code&gt; 스크립트를 작성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
while true; do
  sleep 1
  echo &amp;quot;xinit /root/.xinitrc -- /etc/X11/xinit/xserverrc&amp;quot; 
  | su - root
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 스크립트는 루트(root) 계정으로 X를 시작하면서 /root/.xinitrc 파일을 시작 스크립트 파일로 지정합니다. 따라서, 이 방법은 위 두가지와 다르게 사용자 셸(bash)을 거치지 않고 직접 X 서버를 실행합니다. 그리고, 다른 방법과 마찬가지로 종료시 자동으로 X를 재시작합니다.  X 실행 이후 시작하는 스크립트는 다른 방법과 동일합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>멀티 터치 스크린과 X 서버</title>
      <link>https://lethean.github.io/2007/02/16/multi-touch-screen-and-x-server/</link>
      <pubDate>Fri, 16 Feb 2007 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2007/02/16/multi-touch-screen-and-x-server/</guid>
      <description>&lt;p&gt;멀티 터치 스크린 관련 데모 동영상:&lt;/p&gt;
&lt;p&gt;이와 더불어 X 서버에서 복수 마우스 입력을 지원하기 위한 프로젝트인 
&lt;a href=&#34;http://wearables.unisa.edu.au/mpx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MPX&lt;/a&gt;
도 눈여겨둘만 하다.&lt;/p&gt;
&lt;p&gt;참고:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.burtonini.com/blog/computers/multitouch-2007-02-14-09-44&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multitouch and GNOME&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.macrumors.com/2007/02/12/more-multitouch-from-jeff-han/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;More Multitouch from Jeff Han&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://wearables.unisa.edu.au/mpx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Multi-Pointer X Server&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Feisty Compiz 사용시 윈도우가 빈 상태로 나타나는 현상</title>
      <link>https://lethean.github.io/2007/02/13/ubuntu-feisty-compiz-black-window/</link>
      <pubDate>Tue, 13 Feb 2007 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2007/02/13/ubuntu-feisty-compiz-black-window/</guid>
      <description>&lt;p&gt;Ubuntu Feisty에서 공식 compiz 패키지와 함께 gnome-compiz-manager를 사용하는데 가끔씩 윈도우가 빈 상태로 나타나는 현상이 발생했다. 곧 고쳐지겠거니 하고 기다리다 지쳐 검색해보니, 역시 
&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/&amp;#43;source/compiz/&amp;#43;bug/82999&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;해결방법&lt;/a&gt;
이 있었다.&lt;/p&gt;
&lt;p&gt;다음과 같은 옵션 항목을 X서버 설정 파일에(&lt;code&gt;/etc/X11/xorg.conf&lt;/code&gt;) 넣어주면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Section &amp;quot;Device&amp;quot;
      Identifier      &amp;quot;Intel 82852/855GM&amp;quot;
      Driver          &amp;quot;i810&amp;quot;
      BusID           &amp;quot;PCI:0:2:0&amp;quot;
      Option          &amp;quot;XAANoOffscreenPixmaps&amp;quot; &amp;quot;true&amp;quot;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 약간의 성능 손실은 있겠지만, 일단 정상적으로 동작한다.&lt;/p&gt;
&lt;p&gt;;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FontConfig 2.4 in Ubuntu Feisty</title>
      <link>https://lethean.github.io/2006/12/01/fontconfig-24-in-ubuntu-feisty-2/</link>
      <pubDate>Fri, 01 Dec 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/12/01/fontconfig-24-in-ubuntu-feisty-2/</guid>
      <description>&lt;p&gt;폰트 설정 방식이 바뀐다고 적은지 하루만에 &lt;code&gt;language-selector.conf&lt;/code&gt; 파일을 적용하는 기능이 추가되었다. 다만 파이어폭스 등에서 은돋움 폰트 모양이 내 맘에 안들기 때문에 &lt;code&gt;/usr/share/language-selector/fontconfig/ko_KR&lt;/code&gt; 파일에서 &lt;code&gt;hintmedium&lt;/code&gt; 을 모두 &lt;code&gt;hintfull&lt;/code&gt; 로 변경만 해주니 다시 쾌적한 폰트 환경으로 돌아오게 되었다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FontConfig 2.4 in Ubuntu Feisty</title>
      <link>https://lethean.github.io/2006/11/30/fontconfig-24-in-ubuntu-feisty/</link>
      <pubDate>Thu, 30 Nov 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/11/30/fontconfig-24-in-ubuntu-feisty/</guid>
      <description>&lt;p&gt;그렇다. 한동안 잠잠하더니 fontconfig 패키지가 2.4.1 버전으로 올라가면서 폰트 관련 설정이 대폭 변경되었다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/fonts/language-selector.conf&lt;/code&gt; 파일은 아예 참조도 안하고, 설정 파일도 철저하게(?) 분리되고 위치도 &lt;code&gt;/etc/fonts/conf.d&lt;/code&gt;와 &lt;code&gt;/etc/fonts/conf.avail&lt;/code&gt;로 나뉘어 설치와 사용을 구분하고 있다. 폰트 캐시 파일은 폰트가 위치한 각 디렉토리에 &lt;code&gt;fonts.cache-1&lt;/code&gt;로 유지하더니 이제는 &lt;code&gt;/var/cache/fontconfig&lt;/code&gt;로 통합되었다. 변동사항을 보니 이렇게 한군데로 모은뒤 메모리맵핑된 영역을 모든 프로세스가 공유하는 방식으로 바뀌면서 전체적인 어플리케이션 시작 속도 향상을 꾀한 것도 같다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I810 &#43; Compiz in Ubuntu</title>
      <link>https://lethean.github.io/2006/11/30/i810-compiz-in-ubuntu/</link>
      <pubDate>Thu, 30 Nov 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/11/30/i810-compiz-in-ubuntu/</guid>
      <description>&lt;p&gt;많은 사람들이 3D 데스크탑 효과를 얻기 위해 
&lt;a href=&#34;http://www.beryl-project.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beryl 프로젝트&lt;/a&gt;
 결과물을 이용하는데, 내 경우 Beryl 보다 심플한 설정 인터페이스를 지닌 오리지널 
&lt;a href=&#34;http://www.go-compiz.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Compiz 윈도우 매니저&lt;/a&gt;
를 더 선호한다. 특히 노트북처럼 1.4Hz CPU지만 전원절약을 위해 대부분 시간을 600MHz로 동작하고, 비디오카드도 인텔 계열(I810)이라서, 무분별하게(?) 화려한 Beryl 프로젝트보다 Compiz 프로젝트가 더 적합한 것 같다.&lt;/p&gt;
&lt;p&gt;회사에서 작업용으로 사용한 장비의 경우도 NVidia 비디오카드이고 CPU도 넉넉하지만 굳이 Compiz를 사용하는데, Beryl을 이용하면 발생하는 가끔 윈도우가 까맣게 보이는 현상이 Compiz의 경우 발생하지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;우분투의 경우 XGL을 설치하지 않아도 &amp;lsquo;
&lt;a href=&#34;http://gandalfn.wordpress.com/compiz-repository/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu Compiz Repository&lt;/a&gt;
&amp;rsquo; 페이지의 설명을 따라 몇 개 패키지만 설치하면 자동으로 설치한다. 특히 여기서 &lt;span style=&#34;font-weight:bold;&#34;&gt;개발 버전(development branch)&lt;/span&gt;를 설치하면 Beryl 프로젝트에 있는 대부분의 플러그인도 비슷하게 사용할 수 있다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dual Monitors &#43;XRandR</title>
      <link>https://lethean.github.io/2006/07/20/dual-monitors-xrandr/</link>
      <pubDate>Thu, 20 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/07/20/dual-monitors-xrandr/</guid>
      <description>&lt;p&gt;프로젝트를 위해 새로운 모니터 2대로 교체하면서 듀얼 모니터를 사용하기 위해 비디오카드도 함께 교체했다. (LG Flatron L2012P x 2 + NVidia Geforce 7300 GT) Ubuntu 6.06 LTS 버전을 사용하고 있는데, 우분투 위키에 있는대로 nvidia-glx 패키지를 설치와 몇몇 설정을 마친 뒤 X 서버 설정까지 튜닝한 이후 다음과 같이 동작하는 환경을 얻게 되었다.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.flickr.com/photos/72033444@N00/193829822/&#34; title=&#34;Photo Sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://lethean.github.io/figures/193829822_f8fa5aee5e_b.jpg&#34; alt=&#34;screenshot-dual\_monitor-2400x1600&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.flickr.com/photos/72033444@N00/193839516/&#34; title=&#34;Photo Sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://lethean.github.io/figures/193839516_d49be3cb3c_b.jpg&#34; alt=&#34;photo-dual\_monitor-2400x1600&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;원래는 각각 1600x1200 해상도로 셋팅한 것이지만, 이를 세로로 돌려(모니터가 돌아간다!) 길게 옆으로 붙인 것이다.&lt;/p&gt;
&lt;p&gt;이에 대한 X 설정은 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Section &amp;quot;Files&amp;quot;
   FontPath    &amp;quot;/home/lethean/.fonts&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/misc&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/cyrillic&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/100dpi/:unscaled&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/75dpi/:unscaled&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/Type1&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/100dpi&amp;quot;
   FontPath    &amp;quot;/usr/share/X11/fonts/75dpi&amp;quot;
EndSection

Section &amp;quot;Module&amp;quot;
   Load    &amp;quot;bitmap&amp;quot;
   Load    &amp;quot;dbe&amp;quot;
   Load    &amp;quot;ddc&amp;quot;
   Load    &amp;quot;extmod&amp;quot;
   Load    &amp;quot;freetype&amp;quot;
   Load    &amp;quot;glx&amp;quot;
   Load    &amp;quot;int10&amp;quot;
   Load    &amp;quot;type1&amp;quot;
   Load    &amp;quot;vbe&amp;quot;
EndSection

Section &amp;quot;InputDevice&amp;quot;
   Identifier    &amp;quot;Generic Keyboard&amp;quot;
   Driver        &amp;quot;kbd&amp;quot;
   Option        &amp;quot;CoreKeyboard&amp;quot;
   Option        &amp;quot;XkbRules&amp;quot;    &amp;quot;xorg&amp;quot;
   Option        &amp;quot;XkbModel&amp;quot;    &amp;quot;pc104&amp;quot;
   Option        &amp;quot;XkbLayout&amp;quot;    &amp;quot;us&amp;quot;
EndSection

Section &amp;quot;InputDevice&amp;quot;
   Identifier    &amp;quot;Configured Mouse&amp;quot;
   Driver        &amp;quot;mouse&amp;quot;
   Option        &amp;quot;CorePointer&amp;quot;
   Option        &amp;quot;Device&amp;quot;        &amp;quot;/dev/input/mice&amp;quot;
   Option        &amp;quot;Protocol&amp;quot;        &amp;quot;ExplorerPS/2&amp;quot;
   Option        &amp;quot;ZAxisMapping&amp;quot;        &amp;quot;4 5&amp;quot;
EndSection

Section &amp;quot;Device&amp;quot;
   Identifier    &amp;quot;NVIDIA Corporation NVIDIA Default Card&amp;quot;
   Driver        &amp;quot;nvidia&amp;quot;
   Option        &amp;quot;NoLogo&amp;quot;    &amp;quot;true&amp;quot;
   BusID        &amp;quot;PCI:1:0:0&amp;quot;

   Option        &amp;quot;RandRRotation&amp;quot; &amp;quot;true&amp;quot;
   Option        &amp;quot;Rotate&amp;quot;    &amp;quot;left&amp;quot;
   Option        &amp;quot;UseEdidFreqs&amp;quot;    &amp;quot;true&amp;quot;

   # TwinView
   Option        &amp;quot;TwinView&amp;quot;    &amp;quot;true&amp;quot;
   Option        &amp;quot;SecondMonitorHorizSync&amp;quot;    &amp;quot;28-83&amp;quot;
   Option        &amp;quot;SecondMointorVertRefresh&amp;quot;    &amp;quot;56-85&amp;quot;
#    Option        &amp;quot;TwinViewOrientation&amp;quot;        &amp;quot;RightOf&amp;quot;
   Option        &amp;quot;TwinViewOrientation&amp;quot;        &amp;quot;Above&amp;quot;
   Option        &amp;quot;MetaModes&amp;quot; &amp;quot;1600x1200,1600x1200&amp;quot;
#    Option        &amp;quot;ConnectedMonitor&amp;quot;        &amp;quot;CRT, DFP&amp;quot;
EndSection

Section &amp;quot;Monitor&amp;quot;
   Identifier    &amp;quot;L2012P&amp;quot;
   Option        &amp;quot;DPMS&amp;quot;
   HorizSync    28-83
   VertRefresh    56-85
EndSection

Section &amp;quot;Screen&amp;quot;
   Identifier    &amp;quot;Default Screen&amp;quot;
   Device        &amp;quot;NVIDIA Corporation NVIDIA Default Card&amp;quot;
   Monitor        &amp;quot;L2012P&amp;quot;
   DefaultDepth    24
   SubSection &amp;quot;Display&amp;quot;
       Depth        16
       Modes        &amp;quot;1600x1200&amp;quot;
   EndSubSection
   SubSection &amp;quot;Display&amp;quot;
       Depth        24
       Modes        &amp;quot;1600x1200&amp;quot;
   EndSubSection
EndSection

Section &amp;quot;ServerLayout&amp;quot;
   Identifier    &amp;quot;Default Layout&amp;quot;
   Screen        &amp;quot;Default Screen&amp;quot;
   InputDevice    &amp;quot;Generic Keyboard&amp;quot;
   InputDevice    &amp;quot;Configured Mouse&amp;quot;
EndSection

Section &amp;quot;DRI&amp;quot;
   Mode    0666
EndSection
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>X.ORG &#43; I810(915G) &#43; LG FLATRON L2010P</title>
      <link>https://lethean.github.io/2005/11/19/xorg-i810915g-lg-flatron-l2010p/</link>
      <pubDate>Sat, 19 Nov 2005 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2005/11/19/xorg-i810915g-lg-flatron-l2010p/</guid>
      <description>&lt;p&gt;데스크탑 개발 환경으로 사용하던 장비를 915 보드로 변경하면서 기존에 사용하던 하드디스크를 그대로 장착해서 환경을 꾸몄다. 사용하던 NVidia 비디오 카드는 AGP 방식인데 새로운 보드는 PCI Express 방식이라 어쩔 수 없이 내장 그래픽 보드인 915G를 이용하게 되었는데, 문제는 모니터로 사용하던 LG FLATRON L2010P 모델 (20인치)에서 주파수 범위 에러가 나면서 모니터를 인식하지 못하는 것이었다. CRT 모니터에 연결하니 정상적으로 나오고, 다른 머신에서 네트웍으로 접속해 확인하면 모든 프로그램은 정상적으로 구동된 것을 확인할 수 있었다. 모니터 주파수 문제임을 확인하고, 구글링을 통해 이것 저것 정보를 찾아보았으나 결국 실패, 혹시나 하고 X.Org의 버그질라에서 비슷한 현상을 발견하고 여러가지 옵션을 조합해서 해결할 수 있었다.&lt;/p&gt;
&lt;p&gt;문제의 원인은 X 서버의 DDC 모듈이 모니터의 수평/수직 주파수를 자동으로 알아오는데 이 값이 잘못된 것이었다. 해결책은 수동으로 주파수를 입력하고 DDC 모듈을 사용하지 못하게 하는 것인데, 수직 주파수의 경우 일반적으로 사용하는 주파수 범위가 아닌 TFT LCD 모니터 특성에 맞게 60.0 을 고정으로 설정해야 한다는 점이 특이하다. 다음은 xorg.conf 중 이 부분에 해당하는 설정이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Section &amp;quot;Device&amp;quot;
  Identifier &amp;quot;Intel Corporation i915&amp;quot;
  Driver &amp;quot;i810&amp;quot;
  BusID &amp;quot;PCI:0:2:0&amp;quot;
  Option &amp;quot;NoDDC&amp;quot; &amp;quot;true&amp;quot;
  # Option &amp;quot;VBERestore&amp;quot; &amp;quot;true&amp;quot;
  # Option &amp;quot;DisplayInfo&amp;quot; &amp;quot;false&amp;quot;
EndSection
Section &amp;quot;Monitor&amp;quot;
  Identifier &amp;quot;L2010P&amp;quot;
  HorizSync 28-92
  VertRefresh 60.0
  Option &amp;quot;DPMS&amp;quot;
EndSection 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 수평주파수 값은 sudo ddcprobe 결과값을 그대로 적어준 것이다.&lt;/p&gt;
&lt;p&gt;한가지 놀란 점은 혹시나 하고 glxgears 프로그램을 실행했더니, 느낌인지는 몰라도 NVidia보다 CPU 점유율도 낮고 성능이 더 좋은 것 같다는 점이다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
