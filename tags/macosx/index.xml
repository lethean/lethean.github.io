<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MacOSX | 대체로 무해함</title>
    <link>https://lethean.github.io/tags/macosx/</link>
      <atom:link href="https://lethean.github.io/tags/macosx/index.xml" rel="self" type="application/rss+xml" />
    <description>MacOSX</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Sat, 09 Jan 2010 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>MacOSX</title>
      <link>https://lethean.github.io/tags/macosx/</link>
    </image>
    
    <item>
      <title>GCC 미리 정의된 매크로 얻기</title>
      <link>https://lethean.github.io/2010/01/09/getting-predefined-macros-in-gcc/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2010/01/09/getting-predefined-macros-in-gcc/</guid>
      <description>&lt;p&gt;멀티플랫폼에서 동작하는 C/C++ 코드를 gcc를 이용해 컴파일할때 플랫폼이나 운영체제를 확인하는 방법 중 하나는 gcc 툴체인이 만들어질때 정의되는 매크로를 사용하는 것입니다. 그런데 이번에 MacOS X / iPhone 플랫폼에 기존 코드를 포팅하면서 이 방법을 이용하려 하는데, 너무 오래 전에 했던 작업이라 (역시나) 명령어를 기억할 수 없었습니다. 그래서 겨우 구글링해서 다시 알게된 내용을 기록해 둡니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gcc -E -dM -x c /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이 방법을 이용해 사용한 최종 코드는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#if defined(_WIN32)
#include &amp;quot;lib-win32/config.h&amp;quot;
#elif defined(_WIN64)
#include &amp;quot;lib-win64/config.h&amp;quot;
#elif defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__)
#include &amp;quot;lib-iphone/config.h&amp;quot;
#elif defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) /* or __APPLE__ */
#include &amp;quot;lib-macosx/config.h&amp;quot;
#else /* linux */
#include &amp;quot;config.h&amp;quot;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사실은, 더 깔끔한 다른 방법이 있을지 궁금하기도 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>리눅스 / 맥오에스에서 CPU 갯수 얻기</title>
      <link>https://lethean.github.io/2009/12/27/get-number-of-cpu-on-linux-and-macosx/</link>
      <pubDate>Sun, 27 Dec 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/12/27/get-number-of-cpu-on-linux-and-macosx/</guid>
      <description>&lt;p&gt;Linux / MacOS X 플랫폼에서 CPU 갯수를 얻어오는 함수입니다. 잊어버릴까봐 기록해 둡니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#ifdef __linux__
#include &amp;lt;sys/sysinfo.h&amp;gt;
#else
#ifdef __APPLE__
#include &amp;lt;sys/param.h&amp;gt;
#include &amp;lt;sys/sysctl.h&amp;gt;
#else
#error &amp;quot;Only Linux or OSX is supported!&amp;quot;
#endif /* __APPLE__ */
#endif /* __linux__ */

static int
get_cpu_nr (void)
{
#ifdef __linux__
  return get_nprocs ();
#endif
#ifdef __APPLE__
  int i = 0;
  size_t s = sizeof (i);
  if (sysctlbyname (&amp;quot;hw.ncpu&amp;quot;, &amp;amp;i, &amp;amp;s, NULL, 0))
    return 1;
  return i;
#endif
}

int
main (int argc, char **argv)
{
  printf (&amp;quot;cpu_nr:%dn&amp;quot;, get_cpu_nr ());

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;출처는 
&lt;a href=&#34;http://github.com/chergert/dukes_of_hazard/raw/master/main.c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;이 소스&lt;/a&gt;
입니다. 참고로 리눅스의 &lt;code&gt;/usr/include/sys/sysinfo.h&lt;/code&gt; 파일을 들여다보면 램 크기 / 스왑 크기 / 물리 페이지 크기 등과 같은 시스템 관련 정보를 얻을 수 있는 함수가 여럿 보이는군요. &lt;code&gt;/proc&lt;/code&gt; 정보를 파싱하는 것보다 더 편리할 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tcpdump를 이용한 네트워크 사용량 측정하기</title>
      <link>https://lethean.github.io/2009/12/15/network-traffic-analysis-using-tcpdump/</link>
      <pubDate>Tue, 15 Dec 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/12/15/network-traffic-analysis-using-tcpdump/</guid>
      <description>&lt;p&gt;업무상 실제 패킷 사용량을 측정할 필요때문에 여러가지 도구를 찾던 중 마땅한 걸 찾지 못해 직접 측정한 방식을 정리해 봅니다. 물론 이보다 더 좋은 방법들이 당연히 있을테지만, tcpdump 프로그램만 겨우 사용할 수 있는 환경에서 측정하는 법을 정리한 문서를 찾지 못해 남겨둡니다.&lt;/p&gt;
&lt;p&gt;우선 어떤 방식으로든 해당 장비에 tcpdump 프로그램을 설치합니다.&lt;/p&gt;
&lt;p&gt;그리고 측정하려는 과정이나 단계가 시작하는 동시에 다음과 같이 tcpdump 프로그램을 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tcpdump -qvtttt dst xxx.xxx.xxx.xxx &amp;gt; packet-dump.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &lt;code&gt;xxx.xxx.xxx.xxx&lt;/code&gt;는 측정에 사용할 대상 장비입니다. 즉, 위 예제는 특정 IP로 전송하는 패킷량만 캡쳐하여 &lt;code&gt;packet-dump.txt&lt;/code&gt; 파일에 저장합니다. 중요한 점은 앞의 옵션인데, 이 옵셥을 사용해야 아래에서 사용하는 스크립트가 분석할 수 있는 형태의 결과물로 저장됩니다. 그리고, 필요하다면, 저장한 파일을 리눅스 또는 맥 장비로 복사합니다.&lt;/p&gt;
&lt;p&gt;저장한 파일을 &lt;code&gt;conv2csv.sh&lt;/code&gt; 스크립트를 이용해 엑셀이나 오픈오피스에서 읽어들일 수 있는 CSV 파일 형태로 변환합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./conv2csv.sh packet-dump.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;변환된 &lt;code&gt;packet-dump.csv&lt;/code&gt; 파일은 한 행에 &amp;lsquo;&lt;strong&gt;TIMESTAMP BYTES Kbps&lt;/strong&gt;&amp;rsquo; 형태로 각 초당 데이터가 저장되어 있습니다. 따라서 이 파일을 액셀이나 오픈오피스에서 공백(space)을 구분자로 해서 읽어들인 후 3번째 컬럼을 사용하면 됩니다. 참고로 여기서 측정한 크기는 IP/TCP/UDP 헤더까지 포함한 크기입니다.&lt;/p&gt;
&lt;p&gt;다음은 이렇게 변환한 데이터를 구글 스프레드시트를 이용해 만든 차트입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lethean.github.io/figures/packet-traffic-analysis.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;위에서 언급한 &lt;code&gt;conv2csv.sh&lt;/code&gt; 스크립트는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

CSVFILE=&amp;quot;$(dirname $1)/$(basename $1 .txt).csv&amp;quot;

awk &#39;{ print $2, $18 }&#39; $1 | 
  tr &#39;.)&#39; &#39;  &#39; | 
  awk &#39;BEGIN { last = &amp;quot;&amp;quot;; sum = 0; } 
       { if (last == $1) 
           { sum += $3 } 
         else 
           { print last, sum, sum * 8 / 1000; 
             last = $1; 
             sum = $3; } 
       }&#39; &amp;gt; $CSVFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MacOS X의 한글 이름 파일을 리눅스에 복사하면 깨지는 현상 고치기</title>
      <link>https://lethean.github.io/2009/10/06/fix-broken-hangul-filename-from-mac-os-x-in-linux/</link>
      <pubDate>Tue, 06 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/10/06/fix-broken-hangul-filename-from-mac-os-x-in-linux/</guid>
      <description>&lt;p&gt;요즘 맥북과 리눅스를 같이 사용하면서 여러가지 방법으로 파일을 공유하고 있는데, SSH 등으로 직접 복사할때 파일 이름에 한글이 포함되어 있으면 깨지는 현상이 발생합니다. 리눅스에서 맥으로 복사할때는 문제가 없는데, 다시 맥에서 리눅스로 복사하면 파일 이름의 한글이 요상하게 보입니다. 동일한 UTF-8 환경이라 문제가 없을 줄 알았는데, 이 때문에 Unison 같은 프로그램도 오동작을 합니다.&lt;/p&gt;
&lt;p&gt;대략 검색해보니 UTF-8을 인코딩할때 리눅스 계열의 운영체제는 NFC(normalization form C) 방식을 사용하는데 맥의 다윈 커널에서는  NFD(normalization form D) 방식을 사용하기 때문이랍니다. 아무튼, 해결하는 방법은 convmv 프로그램을 이용하면 됩니다.&lt;/p&gt;
&lt;p&gt;우선 다음과 같이 convmv 프로그램을 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install convmv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;한글이 깨진 파일이나 디렉토리에서 다음 명령을 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ convmv -f utf8 -t utf8 -r --nfc --notest *
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;더 자세한 사용법은 `&lt;code&gt;man convmv&lt;/code&gt;&amp;lsquo;를 입력하시길~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GLib 메인루프와 애플 GCD의 libdispatch</title>
      <link>https://lethean.github.io/2009/09/17/glib-mainloop-vs-libdispatch-of-apple-gcd/</link>
      <pubDate>Thu, 17 Sep 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/09/17/glib-mainloop-vs-libdispatch-of-apple-gcd/</guid>
      <description>&lt;p&gt;GTK 메일링 리스트에 
&lt;a href=&#34;http://mail.gnome.org/archives/gtk-devel-list/2009-September/msg00036.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;흥미있는 포스트&lt;/a&gt;
가 있어서 정리해 봅니다.&lt;/p&gt;
&lt;p&gt;스노우 레오파드 출시와 더불어 오픈 소스로 공개되면서 요즘 한창 이슈가 되고 있는 애플의 
&lt;a href=&#34;http://arstechnica.com/open-source/news/2009/09/apple-opens-gcd-challenges-impede-adoption-on-linux.ars&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCD(Grand Central Dispatch)&lt;/a&gt;
의 일부인 
&lt;a href=&#34;http://libdispatch.macosforge.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;libdispatch&lt;/a&gt;
 라이브러리와 GLib 메인루프를 비교한 내용인데, 정리해 보면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;libdispatch는 세 종류의 실행 큐를 제공하는데 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;메인 큐(main queue) : GLib의 메인 이벤트 루프와 동일&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;전역 큐(global queue) : 쓰레드풀(thread pool) 방식으로 동작하며 모든 작업(job)은 이 큐로 보내진 다음 임의의 쓰레드에서 비동기(asynchronously) 실행됩니다&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;개인 큐(private queue) : 이 큐의 작업은 순서대로 실행됩니다.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;개인 큐와 메인 큐는 전역 큐의 쓰레드로 동작하는데, 이 방식은 GLib에서 GSource(g_idle / g_timeout / etc) 콜백함수를  다른 쓰레드에서 처리하게 위해 GMainLoop + GThreadPool 조합을 사용하는 것보다 사용자에게 더 편한 것 같습니다. 물론 libdispatch는 GCC를 확장한 블럭(blocks)이라는 문법을 이용하므로 사용하려면 GCC 패치가 필요합니다. 참고로, 블럭(blocks)은 함수형 언어나 스크립트 언어에서 지원되는 일종의 익명(anonymous) 함수인데, GLib의 GClosure와 비슷한 역할을 합니다. 예를 들어 C 언어에서는 특정 이벤트나 시그널이 발생할때 처리를 하려면 함수를 정의하고 이 함수를 콜백함수로 등록해야 하는데, 블럭(blocks)을 사용하면 함수를 따로 정의하지 않고 코드 블럭을 직접 시그널에 연결할 수 있는 셈입니다.&lt;/p&gt;
&lt;p&gt;그런데 이 포스트에 달린 댓글을 보면 GLib을 이용해 GCD와 비슷한 역할을 하는 라이브러리인 
&lt;a href=&#34;http://git.dronelabs.com/iris&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iris&lt;/a&gt;
와 
&lt;a href=&#34;http://git.dronelabs.com/catalina&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;catalina&lt;/a&gt;
 라이브러리도 소개하고 있군요. 어쩌면  얼마 안있어 GCD를 참고한 라이브러리나 혹은 새로운 GLib API가 추가될 지도 모른다고 예측해 봅니다. 워낙 오픈소스 쪽은 부지런한 사람이 많아서 말이죠&amp;hellip; :)&lt;/p&gt;
&lt;p&gt;얼마전에는, 작은 웹서버를 띄우고 웹페이지에서 실행중인 GTK 어플리케이션의 모든 GObject 객체를 보여주는 것은 물론 바로 객체 속성도 수정할 수 있는 
&lt;a href=&#34;http://mail.gnome.org/archives/gtk-list/2009-September/msg00044.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gtkwebd 유틸리티가 소개&lt;/a&gt;
되었고, 구글 어스나 나사의 월드윈드처럼 3차원으로 지구 지도를 보여주도록 도와주는 
&lt;a href=&#34;http://mail.gnome.org/archives/gtk-list/2009-September/msg00050.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWether 라이브러리도 공개&lt;/a&gt;
되었습니다. 물론 
&lt;a href=&#34;https://lethean.github.io/2009/02/03/location-aware-softwares-in-linux/&#34;&gt;이전 포스트&lt;/a&gt;
에서 다룬 
&lt;a href=&#34;http://projects.gnome.org/libchamplain/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;libchamplain&lt;/a&gt;
 라이브러리에 더 관심이 많아 그다지 흥미롭지는 않았는데, 모르고 있던 
&lt;a href=&#34;http://earthobservatory.nasa.gov/Features/BlueMarble/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blue Marble NG&lt;/a&gt;
, 
&lt;a href=&#34;http://topex.ucsd.edu/WWW_html/srtm30_plus.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SRTM 30 Plus&lt;/a&gt;
 등과 같은 무료 지도 데이터 정보를 알 수 있게 되어 고마울 따름입니다.&lt;/p&gt;
&lt;p&gt;아무튼 이쪽 세상은 끊임없이 상용 코드를 벤치마킹하고 모방하면서 조금씩 계속 진화하고 있습니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
