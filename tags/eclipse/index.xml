<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse | 대체로 무해함</title>
    <link>https://lethean.github.io/tags/eclipse/</link>
      <atom:link href="https://lethean.github.io/tags/eclipse/index.xml" rel="self" type="application/rss+xml" />
    <description>Eclipse</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Fri, 12 Feb 2010 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Eclipse</title>
      <link>https://lethean.github.io/tags/eclipse/</link>
    </image>
    
    <item>
      <title>구글 프로토콜 버퍼(Protocol Buffers)</title>
      <link>https://lethean.github.io/2010/02/12/google-protocol-buffers/</link>
      <pubDate>Fri, 12 Feb 2010 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2010/02/12/google-protocol-buffers/</guid>
      <description>&lt;p&gt;구글 
&lt;a href=&#34;http://code.google.com/p/protobuf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;프로토콜 버퍼&lt;/a&gt;
 라이브러리에 대해서는 몇 번 
&lt;a href=&#34;https://lethean.github.io/2010/01/29/0mq-a-new-approach-to-messaging/&#34;&gt;언급&lt;/a&gt;
을 한 적이 있는데, 관심만 있고 아직 프로젝트에 사용은 못해보고 있었습니다. 그 이유는 프로젝트 대부분이 C 언어를 사용하는데, &lt;strong&gt;공식적으로&lt;/strong&gt; 지원하는 언어에는 없었기 때문입니다.&lt;/p&gt;
&lt;p&gt;그런데 오늘 우분투 패키지를 업데이트하다가 
&lt;a href=&#34;http://code.google.com/p/protobuf-c/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf-c&lt;/a&gt;
 
&lt;a href=&#34;http://packages.ubuntu.com/lucid/protobuf-c-compiler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;우분투 패키지&lt;/a&gt;
가 있어서 확인해보니, 프로토콜 버퍼 데이터를 읽고 쓸 수 있는 런타임 라이브러리와 *.[hc] 파일을 생성하는 컴파일러가 들어있군요. 그래서 아예 구글 코드 사이트에 있는 
&lt;a href=&#34;http://code.google.com/hosting/search?q=label:protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf 관련 프로젝트 목록&lt;/a&gt;
을 훑어보니, C 언어 뿐 아니라 다양한 언어에 대한 바인딩을 지원할 뿐 아니라 이클립스 플러그인, 와이어샤크(wireshark) 플러그인 등처럼 유용한 도구도 많이 찾을 수 있었습니다.&lt;/p&gt;
&lt;p&gt;이런 경우 언제나 느끼는 거지만, 요즘은 노하우(know-how)보다 노훼어(know-where)가 더 필요한 세상인 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>이클립스(Eclipse) &#43; 원격 SSH 서버 작업하기</title>
      <link>https://lethean.github.io/2008/08/11/eclipse-with-remote-ssh-server/</link>
      <pubDate>Mon, 11 Aug 2008 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2008/08/11/eclipse-with-remote-ssh-server/</guid>
      <description>&lt;p&gt;프로젝트를 빌드할때마다 매번 ssh 프로그램으로 로그인해서 emacs / vi 등의 에디터로 컴파일해서 다시 이를 타겟 장비에 scp 명령어로 복사하고&amp;hellip; 조금 복잡하고 번거롭죠. 또한 개발환경으로 터미널 에디터 밖에 사용이 불가능합니다. 이 글은 이러한 개발 환경을 조금 탈피해서, 실제 소스 파일은 빌드 호스트에 두고 빌드 작업도 빌드 호스트에서 실행하면서, 이클립스(Eclipse) 개발 환경을 이용해 개발하는 방법을 간단하게 설명합니다.&lt;/p&gt;
&lt;p&gt;이 글은 개인 장비에 우분투 리눅스 + Eclipse 개발 환경(3.4 Ganymede 기준)이 구축되어 있다는 가정하에 설명합니다. 원격 빌드 호스트 장비(build-dvr24)는 SSH 서버가 설치되어 있고 개인 계정도 이미 만들어져 있다고 가정합니다.(여기서는 lethean)&lt;/p&gt;
&lt;h3 id=&#34;ssh-로그인-비밀번호-안물어보게-하기&#34;&gt;SSH 로그인 비밀번호 안물어보게 하기&lt;/h3&gt;
&lt;p&gt;SSH 로그인시 비밀번호 확인 과정을 넘어가기 위해 개인공개키를 빌드 호스트에 복사합니다. 그러면 이후 모든 SSH 작업시 비밀번호를 물어보지 않게 되어 편리합니다. 만일 개인공개키가 만들어져 있지 않다면 다음과 같이 생성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t dsa
Enter file in which to save the key (/home/lethean/.ssh/id_dsa): [Enter]
Enter passphrase (empty for no passphrase): [Enter]
Enter same passphrase again: [Enter]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 경우 개인 공개키 파일은 &lt;code&gt;~/.ssh/id_dsa.pub&lt;/code&gt; 파일입니다. 이 파일을 원격 빌드 호스트 계정의 인증키 목록에 다음과 깉이 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-copy-id -i ~/.ssh/id_dsa.pub lethean@build-dvr24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &amp;lsquo;lethean@build-dvr24&amp;rsquo; 부분은 &amp;lsquo;접속계정@호스트이름&amp;rsquo; 형식입니다.&lt;/p&gt;
&lt;h3 id=&#34;원격-파일시스템-연결하기&#34;&gt;원격 파일시스템 연결하기&lt;/h3&gt;
&lt;p&gt;제일 먼저 마운트할 디렉토리를 미리 생성합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p ~/build-dvr24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;터미널에서 다음과 같이 &amp;lsquo;sshfs&amp;rsquo; 프로그램을 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install sshfs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;프로그램을 설치한 뒤 sshfs / fusermount 명령어를 이용해 원격 SSH 서버의 디렉토리를 로컬 파일 시스템에 연결하거나 해제할 수 있습니다. 예를 들어 연결(mount)하려는 원격 디렉토리가 &amp;lsquo;/home/lethean&amp;rsquo;이고, 로컬 홈 디렉토리 밑의 &amp;lsquo;build-dvr24&amp;rsquo; 디렉토리에 연결할 경우 다음과 같이 실행합니다. (원격 디렉토리는 절대경로 방식으로 지정해야 하며 반드시 홈디렉토리일 필요는 없습니다)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sshfs lethean@build-dvr24:/home/lethean ~/build-dvr24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용이 다 끝났으면 다음과 같이 연결을 해제할 수 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ fusermount -u ~/build-dvr24
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이를 부팅시 자동으로 연결하는 방법은 여러가지 방법이 있지만, 쉬운 방법 중 하나는 &amp;lsquo;/etc/rc.local&amp;rsquo; 파일에 다음과 같은 내용을 마지막 &amp;lsquo;exit 0&amp;rsquo; 전에 추가하는 것입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;su lethean -c &#39;sshfs lethean@build-dvr24:/home/lethean ~/build-dvr24&#39;
exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기까지 하면 원격 파일 시스템을 마치 로컬 파일 시스템처럼 사용이 가능하므로 이클립스 뿐 아니라 VI, Emacs 등의 에디터를 이용해 쉽게 편집이 가능합니다.&lt;/p&gt;
&lt;p&gt;(
&lt;a href=&#34;http://fuse.sourceforge.net/wiki/index.php/SshfsFaq#Exporting_via_NFS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;/etc/fstab 파일을 수정하는 방법&lt;/a&gt;
도 있는데 조금 복잡하군요. 관심이 있으시다면 직접 해보시기 바랍니다)&lt;/p&gt;
&lt;h3 id=&#34;이클립스에서-빌드-명령어-실행하기&#34;&gt;이클립스에서 빌드 명령어 실행하기&lt;/h3&gt;
&lt;p&gt;먼저 연결(mount)한 소스를 기반으로 새로운 프로젝트를 생성해야 합니다. C 언어 기반 프로젝트일 경우를 가정할때 순서는 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;lsquo;File -&amp;gt; New -&amp;gt; C Project&amp;hellip;&amp;lsquo;를 선택하여 새로운 프로젝트를 시작합니다.&lt;/li&gt;
&lt;li&gt;프로젝트 이름(Project name)을 입력합니다.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;기본 위치 사용(Use default location)&amp;rsquo; 선택을 해제한 뒤,&lt;/li&gt;
&lt;li&gt;위치(Location)를 직접 선택하여(Browse&amp;hellip;) &amp;lsquo;~/build-dvr24&amp;rsquo; 디렉토리 밑의 해당 소스 디렉토리를 지정합니다.&lt;/li&gt;
&lt;li&gt;프로젝트 종류(Project types)는 &amp;lsquo;Makefile project&amp;rsquo; / &amp;lsquo;Linux GCC&amp;rsquo;를 선택합니다.&lt;/li&gt;
&lt;li&gt;그리고 언어 설정 등을 선택한 뒤 마침(Finish) 버튼을 눌러 새로운 프로젝트를 생성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이제 프로젝트 탐색기(Project Explorer)에서 생성한 프로젝트를 선택하고, 마우스 오른쪽 버튼을 눌러 &amp;lsquo;Properties&amp;rsquo; 메뉴 항목을 선택합니다. 이제 다음 순서대로 빌드 명령어를 변경합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;lsquo;C/C++ Build&amp;rsquo; 항목을 선택합니다.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;기본 빌드 명령어 사용(Use default build command)&amp;rsquo; 선택을 해제한 뒤,&lt;/li&gt;
&lt;li&gt;빌드 명령어(Build command)를 다음과 같이 입력합니다.
&lt;code&gt;ssh lethean@build-dvr24 &#39;make -C project-dir&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서 &amp;lsquo;project-dir&amp;rsquo;은 홈디렉토리 기준 원격 디렉토리를 의미합니다. 파일 시스템이 연결된 로컬 파일 시스템과는 상관없이 ssh 로 직접 연결해서 해당 디렉토리를 빌드하도록 하는게 이 방법의 핵심입니다. 물론 이 방법은 이클립스 뿐 아니라 다른 개발 환경에서도 응용이 가능합니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
