<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wireshark | 대체로 무해함</title>
    <link>https://lethean.github.io/tags/wireshark/</link>
      <atom:link href="https://lethean.github.io/tags/wireshark/index.xml" rel="self" type="application/rss+xml" />
    <description>Wireshark</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Fri, 12 Feb 2010 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Wireshark</title>
      <link>https://lethean.github.io/tags/wireshark/</link>
    </image>
    
    <item>
      <title>구글 프로토콜 버퍼(Protocol Buffers)</title>
      <link>https://lethean.github.io/2010/02/12/google-protocol-buffers/</link>
      <pubDate>Fri, 12 Feb 2010 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2010/02/12/google-protocol-buffers/</guid>
      <description>&lt;p&gt;구글 
&lt;a href=&#34;http://code.google.com/p/protobuf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;프로토콜 버퍼&lt;/a&gt;
 라이브러리에 대해서는 몇 번 
&lt;a href=&#34;https://lethean.github.io/2010/01/29/0mq-a-new-approach-to-messaging/&#34;&gt;언급&lt;/a&gt;
을 한 적이 있는데, 관심만 있고 아직 프로젝트에 사용은 못해보고 있었습니다. 그 이유는 프로젝트 대부분이 C 언어를 사용하는데, &lt;strong&gt;공식적으로&lt;/strong&gt; 지원하는 언어에는 없었기 때문입니다.&lt;/p&gt;
&lt;p&gt;그런데 오늘 우분투 패키지를 업데이트하다가 
&lt;a href=&#34;http://code.google.com/p/protobuf-c/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf-c&lt;/a&gt;
 
&lt;a href=&#34;http://packages.ubuntu.com/lucid/protobuf-c-compiler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;우분투 패키지&lt;/a&gt;
가 있어서 확인해보니, 프로토콜 버퍼 데이터를 읽고 쓸 수 있는 런타임 라이브러리와 *.[hc] 파일을 생성하는 컴파일러가 들어있군요. 그래서 아예 구글 코드 사이트에 있는 
&lt;a href=&#34;http://code.google.com/hosting/search?q=label:protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf 관련 프로젝트 목록&lt;/a&gt;
을 훑어보니, C 언어 뿐 아니라 다양한 언어에 대한 바인딩을 지원할 뿐 아니라 이클립스 플러그인, 와이어샤크(wireshark) 플러그인 등처럼 유용한 도구도 많이 찾을 수 있었습니다.&lt;/p&gt;
&lt;p&gt;이런 경우 언제나 느끼는 거지만, 요즘은 노하우(know-how)보다 노훼어(know-where)가 더 필요한 세상인 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wireshark &amp; tcpdump</title>
      <link>https://lethean.github.io/2008/11/19/wireshark-tcpdump/</link>
      <pubDate>Wed, 19 Nov 2008 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2008/11/19/wireshark-tcpdump/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://www.wireshark.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark&lt;/a&gt;
 프로그램을 이용할때, 문제의 현상이 발생하는 패턴을 모르는 경우 무작정 발생할때까지 패킷을 캡쳐해야 하는 경우가 있습니다. 이때 Wireshark 프로그램으로 무조건 캡쳐를 하면 금방 메모리가 부족해서 프로그램이 죽어버리게 됩니다. 이런 경우 tcpdump 프로그램을 이용하여 패킷을 캡쳐하여 파일에 저장하고, 현상이 발생했을때 멈추고 난뒤 캡쳐한 파일을 다시 Wireshark 프로그램에서 볼 수 있는 방법이 있습니다.&lt;/p&gt;
&lt;p&gt;먼저 tcpdump를 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install tcpdump
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 다음과 같이 패킷 캡쳐를 시작합니다. (물론 모두 한 줄에 적어도 됩니다)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo tcpdump 
  -i eth0 
  -s 1500 
  -C 5 
  -W 3 
  -w capture.pcap 
  &#39;host 192.168.0.100&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &amp;lsquo;-i&amp;rsquo; 옵션은 네트웍 장치 이름, &amp;lsquo;-s&amp;rsquo; 옵션은 패킷 크기, &amp;lsquo;-C&amp;rsquo; 옵션은  캡쳐할 파일을 구분할 크기(MB), &amp;lsquo;-W&amp;rsquo; 옵션은 순환할 파일 갯수,  &amp;lsquo;-w&amp;rsquo; 옵션은 파일 이름 앞부분, 마지막 필터 조건에서 &amp;lsquo;host&amp;rsquo;는 캡쳐할 캡쳐의 IP 주소를 의미합니다.&lt;/p&gt;
&lt;p&gt;이렇게 실행하면 &amp;lsquo;capture.pcap0&amp;rsquo;, &amp;lsquo;capture.pcap1&amp;rsquo;, &amp;lsquo;capture.pcap2&amp;rsquo; 식으로 5MB 단위로 캡쳐 파일을 생성합니다. 그리고 항상 마지막 3개 파일만 남깁니다. 캡쳐 도중 현상이 발생했다면 CTRL-C 키를 눌러 캡쳐를 멈추고, 마지막 파일을 Wireshark 프로그램 메뉴에서 &amp;lsquo;File&amp;rsquo; -&amp;gt; &amp;lsquo;Open&amp;hellip;&amp;rsquo; 기능을 이용해 읽어오면 됩니다.&lt;/p&gt;
&lt;p&gt;더 자세한 내용은 
&lt;a href=&#34;http://www.wireshark.org/docs/wsug_html_chunked/AppToolstcpdump.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark 매뉴얼&lt;/a&gt;
과 &amp;lsquo;man tcpdump&amp;rsquo;를 참고하시길&amp;hellip; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wireshark Bad Checksum</title>
      <link>https://lethean.github.io/2008/11/17/wireshark-bad-checksum/</link>
      <pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2008/11/17/wireshark-bad-checksum/</guid>
      <description>&lt;p&gt;네트웍 패킷을 검사하기 위해 자주 사용하는 
&lt;a href=&#34;http://www.wireshark.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark&lt;/a&gt;
 프로그램을 리눅스에서 실행할때 이더넷 장치에 따라 &amp;lsquo;Bad Checksum&amp;rsquo;을 표시하며 패킷이 붉은 색으로 표시되어 눈에 거슬리는 경우가 종종 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lethean.github.io/figures/wireshark-bad-checksum.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;이는 패킷 전송시 이더넷 하드웨어가 패킷 체크섬을 계산하도록 하는 기능이 자동으로 켜져있는데, 이 부분에 오류가 있는 경우입니다. 대부분의 경우 문제를 야기하지 않지만, 때로는 IP가 제대로 할당되었는데 실제 동작을 안하는 원인이 되기도 합니다. 따라서 이 기능을 끄고 싶을 경우가 발생하는데, 다음과 같은 명령어만 실행하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo ethtool -K eth0 tx off
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서 &amp;lsquo;eth0&amp;rsquo;는 장치 이름입니다. 더 궁금하시면 &amp;lsquo;man ethtool&amp;rsquo;을 통해 확인하시기 바랍니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
