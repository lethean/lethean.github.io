<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Subversion | 대체로 무해함</title>
    <link>https://lethean.github.io/tags/subversion/</link>
      <atom:link href="https://lethean.github.io/tags/subversion/index.xml" rel="self" type="application/rss+xml" />
    <description>Subversion</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Thu, 16 Jul 2009 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Subversion</title>
      <link>https://lethean.github.io/tags/subversion/</link>
    </image>
    
    <item>
      <title>우분투에서 서브버전 저장소 운영하기</title>
      <link>https://lethean.github.io/2009/07/16/manage-subversion-repositories-in-ubuntu/</link>
      <pubDate>Thu, 16 Jul 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/07/16/manage-subversion-repositories-in-ubuntu/</guid>
      <description>&lt;p&gt;회사에서 사용하는 버전 관리 시스템을 Git으로 이전하기 전에, 나중에 또 언젠가 다시 필요할 지 모르는 일이므로, 7년동안 운영해 왔던 Subversion 서버 구성과 운영 방식을 기록해 둡니다. 물론, 우분투 리눅스 환경이고 로컬 / 외부 네트웍 모두에서 svn.example.com 주소로 어디에서든 서브버전에 접근할 수 있도록 환경을 구성하는데 목적이 있습니다.&lt;/p&gt;
&lt;p&gt;제일 먼저 서브버전 패키지를 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install subversion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;우분투처럼 데비안(Debian GNU/Linux) 기반 리눅스는 대부분 저장소(repository) 기본 디렉토리가 &lt;code&gt;/var/lib/svn&lt;/code&gt; 디렉토리입니다. 배포판 규칙을 어기는게 괜히 꺼림칙하므로 이 디렉토리를 지우고 다른 디스크 또는 파티션에 있는 디렉토리를 심볼링 링크로 연결합니다. (여기서는 &lt;code&gt;/opt/svn&lt;/code&gt; 입니다)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo rm /var/lib/svn
$ sudo ln -sf /opt/svn /var/lib/svn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HTTP 방식으로 서브버전을 운영하기 위해 설정합니다. 서브버전이 동작하는 서버는 외부 인터넷에 공개되지 않은 내부 서버입니다. 하지만 내부 서버는 아파치 뿌락찌(proxy) 기능을 이용해 외부에서도 접근 가능하도록 합니다.&lt;/p&gt;
&lt;p&gt;어쨌듯 아파치(Apache) 웹 서버에서 HTTP 방식으로 접근할 수 있도록 서브버전 아파치 모듈을 설치하고 활성화합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libapache2-svn
$ sudo a2enmod dav_svn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;서브버전 아파치 모듈 설정(&lt;code&gt;/etc/apache2/mods-available/dav_svn.conf&lt;/code&gt;)을 다음과 같이 수정합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Location /svn&amp;gt;
DAV svn

SVNParentPath /var/lib/svn

AuthType Basic
AuthName &amp;quot;Subverion Repositories&amp;quot;
AuthUserFile /etc/subversion/dav_svn.passwd
Require valid-user
Order allow,deny
Allow from all

AuthzSVNAccessFile /etc/subversion/dav_svn.authz
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 설정은 &lt;code&gt;http://svn.example.com/svn/&lt;/code&gt; URL을 시작으로 여러 서브버전 저장소를 두도록 합니다.&lt;/p&gt;
&lt;p&gt;이제 사용자 인증 관련 설정을 해야하는데 우선 &lt;code&gt;/etc/subversion/dav_svn.authz&lt;/code&gt; 파일을 다음과 같이 설정합니다. 이 파일을 각 저장소별로 접근할 수 있는 사용자를 그룹지어 접근 권한을 제어하는데 사용합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Groups configuration
[groups]
developers = lethean,user1,user2,user3
project1 = user1,user2
project2 = user2,user3
guests = guest

# Repositories configuration
[project1:/]
@project1 = rw

[project2:/]
@developers = rw
@project2 = r

# All repositories
[/]
@developers = rw
* =
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 실제 사용자 목록을 담고 있는 &lt;code&gt;/etc/subversion/dav_svn.passwd&lt;/code&gt; 파일을 만듭니다. 이 파일은 &lt;code&gt;htpasswd&lt;/code&gt; 프로그램을 이용해 갱신하는데, 여기서는 &amp;lsquo;Basic&amp;rsquo; 인증 방식으로 사용하므로 &amp;lsquo;-m&amp;rsquo; 옵션을 추가해야 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo touch /etc/subversion/dav_svn.passwd
$ sudo htpasswd -m /etc/subversion/dav_svn.passwd lethean
$ sudo htpasswd -m /etc/subversion/dav_svn.passwd user1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 사용자 관리와 웹서버 관련 설정은 끝났으니 서브버전 저장소 설정을 할 차례입니다.&lt;/p&gt;
&lt;p&gt;서브버전 저장소를 HTTP 웹 프로토콜을 통해 무리없이 접근하려면 먼저 사용자 권한을 수정해야 합니다. 우분투의 기본 웹서버 접근 계정은 &lt;code&gt;www-data&lt;/code&gt; 이므로, 이를 &lt;code&gt;src&lt;/code&gt; 그룹에 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo addgroup www-data src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 서브버전 저장소의 권한을 변경하여 &lt;code&gt;src&lt;/code&gt; 그룹이 서브버전 저장소에 접근할 수 있도록 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chgrp -R src /var/lib/svn
$ sudo chmod -R g+rws /var/lib/svn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아파치 웹서버를 재시작합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 서브버전 저장소를 설정합니다. 이 작업은 모든 저장소에 각각 해야 하므로 여기서는 &amp;lsquo;hello&amp;rsquo; 프로젝트라고 가정합니다. 제일 먼저 소스가 제출(commit)되었을때 메일이 발송되고, 버그질라(Bugzilla) 댓글(comments)에 자동으로 추가되도록 &lt;code&gt;/var/lib/svn/hello/hooks/post-commit&lt;/code&gt; 파일을 다음과 같이 편집합니다. 여기서는 모든 소스 코드, 문서가 UTF-8 인코딩을 사용한다고 가정하고, svn-commit-log@example.com 주소로 메일을 전송합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
REPOS=&amp;quot;$1&amp;quot;
REV=&amp;quot;$2&amp;quot;

REPOS_NAME=`basename $REPOS`

# uncomment below if system locale is not UTF-8
#export LANG=ko_KR.UTF-8

/usr/lib/subversion/hook-scripts/commit-email.pl 
  --from &amp;quot;svn-commit@example.com&amp;quot; 
  -s &amp;quot;SVN: $REPOS_NAME&amp;quot; 
  -h example.com 
  &amp;quot;$REPOS&amp;quot; &amp;quot;$REV&amp;quot; svn-commit-log@example.com

/usr/lib/subversion/hook-scripts/svn2bugzilla.rb 
  &amp;quot;$REPOS&amp;quot; &amp;quot;$REV&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 실행 권한을 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chmod +x /var/lib/svn/hello/hooks/post-commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;참, 버그질라로 메일을 보내기 위해 루비를 설치하고,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ruby
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/usr/lib/subversion/hook-scripts/svn2bugzilla.rb&lt;/code&gt; 파일을 다음 내용으로 채운뒤,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby
require &#39;rubygems&#39;
require &#39;active_record&#39;
require &#39;set&#39;
require &#39;fileutils&#39;

# If your Subversion usernames are not the same as your
# Bugzilla usernames, map them here.
USER_MAP = {&amp;quot;lovemetender&amp;quot; =&amp;gt; &amp;quot;lovemetender@example.com&amp;quot;}
USER_DOMAIN = &amp;quot;example.com&amp;quot;

# Location of svnlook binary. Change as necessary.
SVNLOOK = &amp;quot;/usr/bin/svnlook&amp;quot;

# Configure your AR connection here.
# Bugzilla supports both MySQL and PostgreSQL.
AR_CONFIG = {:adapter =&amp;gt; &#39;mysql&#39;,
 :host =&amp;gt; &#39;database.example.com&#39;,
 :port =&amp;gt; 3306,
 :database =&amp;gt; &#39;bugzilla&#39;,
 :username =&amp;gt; &#39;bugmaster&#39;,
 :password =&amp;gt; &#39;bugpassword&#39; }

# You should not have to change anything below this line.

if ARGV[0].nil? || ARGV[1].nil?
 puts &amp;quot;Usage: svn2bugzilla.rb repos_path revision&amp;quot;
 puts &amp;quot;To be used as a subversion post-commit hook.&amp;quot;
 exit
end

REPOS_PATH = ARGV[0]
REVISION = ARGV[1]

ActiveRecord::Base.establish_connection(AR_CONFIG)

ActiveRecord::Base.connection.execute &#39;set character set utf8&#39; 

# These are the three Bugzilla tables we&#39;ll be dealing with.
# It&#39;d probably be less code just to query the database directly,
# bug using ActiveRecord is more fun!

class Bug &amp;lt; ActiveRecord::Base
 set_primary_key &amp;quot;bug_id&amp;quot;
 # longdescs has a column named &#39;type&#39; which doesn&#39;t play well with AR.
 # select the columns we need manually.
 has_many :longdescs, :select =&amp;gt; &amp;quot;comment_id, bug_id, who, bug_when, thetext&amp;quot;
end

# longdescs is the comments table.
class Longdesc &amp;lt; ActiveRecord::Base
 set_primary_key &amp;quot;comment_id&amp;quot;
 belongs_to :bug
 belongs_to :profile, :foreign_key =&amp;gt; &amp;quot;who&amp;quot;
end

# profiles is the user table
class Profile &amp;lt; ActiveRecord::Base
 set_primary_key &amp;quot;userid&amp;quot;
end

class Commit
 def initialize(repository_path, revision_number)
 @repository = File.basename repository_path
 @revision_number = revision_number
 @log_message = `#{SVNLOOK} log #{repository_path} -r #{revision_number}`.strip
 @date = `#{SVNLOOK} date #{repository_path} -r #{revision_number}`.strip
 @files_changed = `#{SVNLOOK} changed #{repository_path} -r #{revision_number}`.strip
 @author = `#{SVNLOOK} author #{repository_path} -r #{revision_number}`.strip
 end

 def message
 &amp;lt;&amp;lt;MESSAGE
#{@log_message}

Repository: #{@repository}
Revision: #{@revision_number}
Author: #{@author}
Date: #{@date}
Changes:
#{@files_changed}

http://svn.example.com/cgi-bin/viewvc.cgi/#{@repository}?revision=#{@revision_number}&amp;amp;view=revision
MESSAGE
 end

 def author
 if USER_MAP[@author].nil?
 return &amp;quot;#{@author}@#{USER_DOMAIN}&amp;quot;
 end

 USER_MAP[@author]
 end

 # return a Set of unique bug numbers in the commit message
 def bug_numbers
 bugs = Set.new
 @log_message.scan(/bugD{1,3}(d+)/i).each do |match|
 bugs &amp;lt;&amp;lt; match[0]
 end

 bugs
 end
end

# Do the actual work of submitting the comment to the database

commit = Commit.new(REPOS_PATH, REVISION)
commit.bug_numbers.each do |bug|
 bug = Bug.find_by_bug_id(bug)

 next if bug.nil?

 user = Profile.find_by_login_name(commit.author)

 next if user.nil?

 bug.longdescs.create(:who =&amp;gt; user.id,
 :thetext =&amp;gt; commit.message,
 :bug_when =&amp;gt; Time.now)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 스크립트 소스를 조금 살펴보시면 버그질라 MySQL 데이터베이스 서버에 대한 접근 정보를 설정하는 부분과, 메일 텍스트 본문에 ViewVC 웹인터페이스를 직접 연결하는 부분이 있으므로, 필요에 맞게 수정해야 합니다. 이제 스크립트에 실행 권한을 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chmod +x /usr/lib/subversion/hook-scripts/svn2bugzilla.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자 이제 마지막, 외부로 공개된 서버에서 접근시 내부 서브버전 서버로 연결하기 위해 공개 서버의 &lt;code&gt;/etc/apache2/sites-available/svn.example.com&lt;/code&gt; 파일을 다음과 같이 편집합니다. 여기서는 공식 서브버전 서버 도메인 이름이 svn.example.com이고 (물론 네임서버에서  IP  주소는 외부로 공개된 서버와 동일합니다) 실제 서브버전 서버 IP는 192.168.0.141 이라고 가정합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *&amp;gt;
  ServerAdmin lethean@example.com
  ServerName svn.example.com
  ErrorLog /var/log/apache2/svn.example.com-error.log
  CustomLog /var/log/apache2/svn.example.com-access.log combined
  UseCanonicalName Off
  ProxyVia On
  ProxyRequests Off
  ProxyPreserveHost On
  ProxyPass / http://192.168.0.141:80/
  ProxyPassReverse / http://192.168.0.141:80/
  ProxyPassReverse / http://svn.example.com:80/
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이 호스트를 활성화하고 아파치를 재시작합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo a2ensite svn.example.com
$ sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;음&amp;hellip; 더 이상 생각나는게 있으면 채워 나가야겠지만, 일단 오늘은 여기까지&amp;hellip; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GLib과 GTK&#43;도 Subversion에서 Git으로 이동</title>
      <link>https://lethean.github.io/2009/04/01/glib-gtk-moved-to-git/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/04/01/glib-gtk-moved-to-git/</guid>
      <description>&lt;p&gt;2009년 4월 1일을 기준으로 GNOME 프로젝트의 핵심이 되는 glib, gtk, pango, atk 프로젝트가 기존 서브버전에서 
&lt;a href=&#34;http://mail.gnome.org/archives/gtk-devel-list/2009-March/msg00206.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git으로 소스 버전 관리 시스템을 변경&lt;/a&gt;
했습니다. 한동안 어떤 버전 관리 시스템을 사용할지 논의가 많았는데, 결국 대세를 거를 수는 없었던 모양입니다. 달라진 사용법은 
&lt;a href=&#34;http://live.gnome.org/GitMigration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git이전하기&lt;/a&gt;
 위키 페이지에 계속 정리되고 있으니 참고하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;참고로, 초기 버전과 달리 최신 버전의 git은 이진(binary) 파일 처리 / 외부(external) 프로젝트 연결 등을 지원합니다. 또한 기존 서브버전 저장소와 동시에 유지할 수 있는 방법(git-svn)도 존재합니다. 하지만 아직 아쉬운 점은 멀티플랫폼 지원, 물론 커맨드 라인 방식으로는 지금도 가능하지만, 하지만 윈도우 탐색기 인터페이스에서 벗어나기 싫어하는 게으른 개발자들에게 커맨드 라인 방식을 강요할 근거가 아직은 부족한 것 같습니다. 윈도우 플랫폼에서 TortoiseSVN처럼 탐색기와 통합된 git 클라이언트만 있다면 지금 당장이라도 회사 개발 프로젝트에 도입할 수 있을 것 같은데&amp;hellip; :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>서브버전 스위치 명령어 사용하기</title>
      <link>https://lethean.github.io/2009/02/06/using-subversion-switch-command/</link>
      <pubDate>Fri, 06 Feb 2009 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2009/02/06/using-subversion-switch-command/</guid>
      <description>&lt;p&gt;서브버전(Subversion) 기반으로 개발할때 브랜치(branches) 작업은 빈번하게 발생합니다. 서브버전은 브랜치 작업을 효율적으로 수행할 수 있도록 스위치(switch) 명령어를 지원하는데, 생각보다 이 명령어를 활용하는 사람이 별로 없는 것 같아 간단하게 사용법을 소개하려 합니다. 여기서 소개하는 방법은 커맨드 라인 명령어를 사용하고 있지만 TortoiseSVN 등과 같은 GUI 프로그램을 이용해도 동일한 작업을 처리할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;현재 작업 중인 소스 트리를 그대로 이용하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;디스크 공간이 부족하거나 다른 브랜치 작업 내용을 잠시만 확인하고 수정할 필요가 있을 경우, 굳이 다른 브랜치를 새로 체크아웃(checkout) 할 필요 없이 현재 소스 트리를 변경만 하면 됩니다. 특히 방대한 전체 소스가 아닌 특정 디렉토리만 해당 브랜치의 디렉토리로 변경하면 시간도 절약됩니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &amp;lsquo;&lt;code&gt;$SVN/dooly/trunk&lt;/code&gt;&amp;rsquo; 소스 트리에서 작업하다가 &amp;lsquo;&lt;code&gt;$SVN/dooly/branches/cms-2.1-0-remote&lt;/code&gt;&amp;rsquo; 브랜치 소스를 작업하고 싶은데, 변경할 부분이 &amp;lsquo;&lt;code&gt;$SVN/dooly/branches/cms-2.1-0-remote/cms/src&lt;/code&gt;&amp;rsquo; 디렉토리 뿐이라면 다음과 같이 작업하면 됩니다. (현재 디렉토리가 소스 시작 디렉토리라고 가정합니다)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd cms/src
svn switch $SVN/dooly/branches/cms-2.1-0-remote/cms/src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 다른 디렉토리는 그대로 &amp;lsquo;&lt;code&gt;trunk&lt;/code&gt;&amp;lsquo;를 이용하고 &amp;lsquo;&lt;code&gt;cms/src&lt;/code&gt;&amp;rsquo; 디렉토리만 &amp;lsquo;&lt;code&gt;cms-2.1-0-remote&lt;/code&gt;&amp;rsquo; 브랜치 소스로 변경됩니다. 이후 이 디렉토리에 작업하는 내용을 커밋하면 모두 해당 브랜치로 커밋됩니다. 물론 다시 원래 소스 트리로 되돌아오고 싶은 경우 다음과 같이 작업하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd cms/src
svn switch $SVN/dooly/trunk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 혼란을 막기 위해 가능한 수정 중인 파일이 없는 게 좋겠지요?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;새로운 브랜치 빨리 내려 받기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;한 번 빌드하는데 많은 시간이 걸리는 소스 트리를 새로 받는 작업은 지루하고 재미없습니다. 만일 브랜치 작업 내용이 소스 디렉토리 전체가 아닌 특정 디렉토리에서만 이루어진다면 다음과 같이 빨리 새로운 브랜치를 구성할 수 있습니다. (현재 디렉토리 밑에 &amp;lsquo;&lt;code&gt;dooly-trunk&lt;/code&gt;&amp;rsquo; 소스 트리가 이미 존재한다고 가정합니다)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp -a dooly-trunk dooly-remote
cd dooly-remote/cms/src
svn switch $SVN/dooly/branches/cms-2.1-0-remote/cms/src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이렇게 하면 쉽고 빠르게 새로운 브랜치에 대한 소스 트리가 준비됩니다. 물론 특정 디렉토리가 아닌 전체 디렉토리에 걸쳐 있는 작업이라도 다음과 같이 하면 새로운 소스를 내려받아 다시 모든 라이브러리를 빌드하는 수고는 줄어듭니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp -a dooly-trunk dooly-remote
cd dooly-remote
svn switch $SVN/dooly/branches/cms-2.1-0-remote
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;처음에도 언급한 것처럼 위의 모든 작업은 어느 운영체제 하에 어떤 서브버전 도구를 이용해도 동일합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Subversion 서버 응답이 느린 문제</title>
      <link>https://lethean.github.io/2006/10/20/slow-subversion-server-response/</link>
      <pubDate>Fri, 20 Oct 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/10/20/slow-subversion-server-response/</guid>
      <description>&lt;p&gt;업무에 서브버전(Subversion)을 사용한지 오래 되었지만 가끔씩 서버(svnserve)가 늦게 응답을 주는 경우가 종종 있었다. 가끔씩 벌어지는 현상이고, 서버 데몬을 재시작하면 해결되는 문제라 무시하고 있다가 문득 구글링을 해보고 원인을 알았다.&lt;/p&gt;
&lt;p&gt;서브버전은 사용자 인증을 위해 리눅스에서 &lt;code&gt;/dev/random&lt;/code&gt; 난수 생성 장치를 이용하는데, 엔트로피가 부족할 경우 채워질때까지 대기하기 때문에 발생하는 현상이다. 서버 장비는 키보드도 거의 사용안하고, IDE 디스크도 없기 때문에 난수 엔트로피를 채워줄 정보가 부족해서 발생하는 경우이다.&lt;/p&gt;
&lt;p&gt;검색을 해보면 설정 옵션을 변경해서 다시 컴파일하라는 둥, 데비안 패키지에 길들여진 내게 무리한 방법만 제시하길래 그냥 다음과 같이 무식하고 단순하며 보안에 위험하다는 방법으로 해결했다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mv /dev/random /dev/random.orig
# ln -sf /dev/urandom /dev/random
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;즉, &lt;code&gt;/dev/random&lt;/code&gt; 장치 대신 &lt;code&gt;/dev/urandom&lt;/code&gt; 장치를 무조건 사용하게 한뒤, 서브버전 데몬을 재시작하면 된다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git을 이용한 소스코드 관리</title>
      <link>https://lethean.github.io/2006/07/03/manage-source-code-using-git/</link>
      <pubDate>Mon, 03 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/07/03/manage-source-code-using-git/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://www-128.ibm.com/developerworks/linux/library/l-git/?ca=dgr-lnxw07UsingGit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;lsquo;Manage source code using Git&amp;rsquo;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;이 글은 리누스 토발즈가 개발하고 리눅스 커널과 여러 오픈소스 프로젝트 개발에 사용하고 있는 git 소스 코드 관리 시스템에 대한 개략적인 튜토리얼이다. 자세한 기술적인 내용이라기보다 처음 접하는 이들에게 필요한 일종의 소개서 정도 되는 수준이다.&lt;/p&gt;
&lt;p&gt;그런데 이 글을 읽으면서 과연 현재 회사에서 사용하고 있는 
&lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;서브버전(subversion)&lt;/a&gt;
을 git으로 대체가 가능할까 궁금해졌다. 이미 서브버전에 있거나 git가 더 나은 점은 대략 다음과 같이 요약할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 작업이 빠르고 쉽다 (subversion도 역시)&lt;/li&gt;
&lt;li&gt;오프라인 작업을 지원해서, 로컬 커밋을 나중에 한꺼번에 할 수 있다. (subversion도 브랜치를 이용하면 가능하지만, 오프라인은 안됨)&lt;/li&gt;
&lt;li&gt;커밋이 프로젝트 전체에 걸쳐 원자성을 가진다 (subversion도 역시)&lt;/li&gt;
&lt;li&gt;모든 작업트리는 전체 프로젝트 히스토리를 담고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 subversion에 있지만 git에는 약간 부족한 기능들은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;윈도우즈(windows)와 같은 멀티 플랫폼 지원&lt;/span&gt; : 커맨드라인 툴과 QGit 등을 이용하면 되겠지만, TortoiseSVN, Eclipse 등에 익숙한 사용자에겐 아직 무리&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;바이너리 &amp;amp; 텍스트 파일 인식 구분 처리&lt;/span&gt; : 라인구분자, 바이너리 diff 처리 등등등&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;사용자 인증&lt;/span&gt; : git는 훅을 통해 구현하는 것 같은데, 복잡해 보인다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 위의 이유로 인해 아직은 도입이 망설여진다. 하지만, SVN 서버가 회사 내부 네트웍에 있어서 집이나 다른 곳에서 작업할때 커밋하기 불편하거나, 여러 브랜치를 관리하다보면 필요한 독립적인 분산 저장소 등이 필요하다고 느낄때는 아마 다시 git을 검토하고 있을 지도 모른다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
