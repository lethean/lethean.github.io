<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Embedded | 대체로 무해함</title>
    <link>https://lethean.github.io/tags/embedded/</link>
      <atom:link href="https://lethean.github.io/tags/embedded/index.xml" rel="self" type="application/rss+xml" />
    <description>Embedded</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Mon, 30 May 2011 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Embedded</title>
      <link>https://lethean.github.io/tags/embedded/</link>
    </image>
    
    <item>
      <title>PCD - Process Control Daemon</title>
      <link>https://lethean.github.io/2011/05/30/pcd-process-control-daemon/</link>
      <pubDate>Mon, 30 May 2011 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2011/05/30/pcd-process-control-daemon/</guid>
      <description>&lt;p&gt;아치리눅스를 비롯한 몇몇 리눅스 배포판은 여전히 시스템 부팅 초기화에 필요한 작업, 예를 들어 로컬 파일 시스템을 마운트하거나 웹서버, X서버 같은 시스템 프로그램을 자동으로 실행하기 위해 전통적인 유닉스의 SysV 시스템 구동 스크립트 방식(런레벨, rc.d 스크립트 등) 혹은 비슷한 방식을 이용하고 있습니다. 하지만 오래된 이 방식은 셸 스크립트 기반이라 전반적인 실행 속도가 느릴 뿐 아니라 프로세스간 의존성, 프로세스 종료시 예외처리(예: 자동 재실행) 등과 같은 기능을 지원하지 않아 많은 시스템 관리자 및 개발자의 불만을 산 것도 사실입니다. 특히 최근 몇 년동안 이슈가 되었던 리눅스 부팅 속도 단축을 위해 제일 먼저 처리되어야 하는 걸림돌로 여겨지기도 했습니다. 이런 이유로, 우분투(Ubuntu)는 오래전부터 자체적으로 개발한 
&lt;a href=&#34;http://upstart.ubuntu.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Upstart&lt;/a&gt;
 프로그램으로 이를 교체했고, 페도라(Fedora) 역시 Fedora 15부터 
&lt;a href=&#34;http://www.freedesktop.org/wiki/Software/systemd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Systemd&lt;/a&gt;
 프로그램을 이용해 구동 과정을 관리합니다. 즉, 요즘 리눅스 서버 / 데스크탑 시스템에서 시스템 초기 부팅 작업을 위한 솔루션은, 가히 춘추전국시대라고 할 수 있을만큼, 각각을 리눅스 표준으로 정착하려고 노력하는 이들이 있는가 하면, 그냥 옛것이 좋은 것이라고 고수하는 이도 있고, 더 단순하고 본인 입맛에 맞는 시스템을 직접 개발해서 사용하는 이도 있을만큼 다양합니다.&lt;/p&gt;
&lt;p&gt;그런데 여담이지만, 아치리눅스 부팅 과정 커스터마이징과 속도를 경험해봐서 그런 건지, 범용 배포판은 어쩔 수 없이 모든 사용자가 만족할 수 있도록 가능한 많은 서비스 프로그램을 기본적으로 설치하고 이를 모두 시작하기 때문에 느려질 수 밖에 없는 건데, 부팅 속도 향상을 위해 시작 프로세스 관리 데몬의 성능과 기능을 개선하는 방향으로만 접근하고 있는 게 아닌가 하는 생각도 듭니다. 물론 다른 고급 기능을 제공한다고 하지만, 어차피 대부분의 기능은 배포판 개발자들만 사용하는 거고&amp;hellip; :) 참고로, 이 
&lt;a href=&#34;http://free-electrons.com/blog/boot-time-genivi-2011/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;발표자료&lt;/a&gt;
만 봐도 부팅 속도와 초기화 프로그램의 능력은 무관한 것 같습니다.&lt;/p&gt;
&lt;p&gt;아무튼, 지금까지 설명한 배경이 최근 
&lt;a href=&#34;http://free-electrons.com/blog/elc-2011-videos/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;임베디드 리눅스 컨퍼런스 2011 발표 슬라이드&lt;/a&gt;
를 읽다가 
&lt;a href=&#34;http://elinux.org/images/b/ba/Elc2011_shalom.odp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PCD(Process Control Daemon)라는 프로세스 관리 데몬을 소개하는 내용&lt;/a&gt;
을 보고 흥미를 가질 수 밖에 없었던 이유입니다. 위에 소개한 최신 프로그램들이 제공하는 기본 기능을 충실히 구현한 것은 물론, 임베디드 시스템을 우선 대상으로 개발했기 때문에 실행파일 크기가 매우 작고 빠르다는 점이 가장 매력적인 장점인 것 같습니다. (자세한 기능은 직접 확인해 보시길&amp;hellip; :)&lt;/p&gt;
&lt;p&gt;Systemd / Upstart 프로그램은 기능은 강력하지만 임베디드 시스템에 적용하기에는 너무 덩치가 크고 라이브러리 의존성도 무시하지 못할만큼 무겁습니다. 또한 임베디드 시스템은 개발자가 시스템의 모든 프로세스를 통제하고 완벽하게 관리해야 하기 때문에, 시스템에 대해 배포판 개발자와 동등하거나 더 많은 이해를 필요로 하므로 이러한 도구를 이용하면 작업이 수월해질 수 있습니다. 더 나아가, 이 프로그램을 조금 더 응용하면 데스크탑 / 서버용 시스템에서 여러 프로세스로 동작하는 시스템을 개발할 때도 유용하지 않을까 하는 생각도 듭니다.&lt;/p&gt;
&lt;p&gt;물론 임베디드 리눅스 개발시 하나의 셸 스크립트 안에서 부팅 과정에 필요한 모든 작업을 처리하는 방식이 무조건 나쁜 건 아닙니다. 다만 복잡도가 더 높은 시스템을 설계할 때는 반드시 이런 프로세스 / 세션 관리 / 예외 처리 프로그램을 사용하거나 알아두면 나중에 참고하는 데 도움이 되지 않을까 생각해 봅니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>libmicrohttpd 내장 웹서버 라이브러리</title>
      <link>https://lethean.github.io/2011/05/02/libmicrohttpd-embedded-web-server-library/</link>
      <pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2011/05/02/libmicrohttpd-embedded-web-server-library/</guid>
      <description>&lt;p&gt;최근 프로젝트에서 내장 웹서버를 운영하기 위해 
&lt;a href=&#34;http://www.gnu.org/software/libmicrohttpd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;libmicrohttpd&lt;/a&gt;
 라이브러리를 적용해 보았습니다. 물론, 임베디드 시스템에서 많이 사용하는 
&lt;a href=&#34;http://www.goahead.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GoAhead&lt;/a&gt;
 등과 같은 상용 라이브러리를 사용하거나, 
&lt;a href=&#34;http://www.busybox.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BusyBox&lt;/a&gt;
 내장 웹서버, 또는 다른 많은 오픈소스 라이브러리를 사용할 수도 있지만, 라이센스도(LGPL 또는 eCos) 괜찮고, 성능과 API 구성이 단순하고 명쾌한 것 같아서 시도해 보았습니다. (물론 아직도 주변에는 라이센스 무시하고 상용 라이브러리 몰래 사용하는 곳이 많긴 하지만&amp;hellip; :-) 참고로, 이 라이브러리는 
&lt;a href=&#34;http://xbmc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XBMC&lt;/a&gt;
 프로젝트를 들여다보다가 내부에서 사용하는 걸 우연하게 발견했습니다.&lt;/p&gt;
&lt;p&gt;내장 웹서버 라이브러리를 사용하면 얻을 수 있는 가장 좋은 장점은 MJPEG, RTSP-over-HTTP 등과 같은 웹기반 스트리밍 서버를 만들때 매우 편리하다는 점입니다. 한 프로세스 안에서 웹서버 + 스트리밍 생성 루틴이 함께 동작하므로 메모리 복사 오버헤드가 줄어들고 프로그래밍 복잡도 역시 감소합니다. 또한 CGI 프로세스가 따로 동작할 필요가 없으므로 웹을 통해 설정을 변경해도 별도의 프로세스간 통신이 불필요합니다.&lt;/p&gt;
&lt;p&gt;물론, 내장 웹서버 방식이 장점만 있는 건 아닙니다. 기존 스탠드얼론 웹서버가 알아서 자동으로 해주던 부분, 예를 들어 디렉토리 인덱스 파일 생성, 동시 접속 클라이언트 수 관리, 클라이언트 캐시를 위한 수정 시각 고려 등을 프로그래머가 직접 작성해야 합니다. 특히 libmicrohttpd 라이브리는 GoAhead 등과 같은 상용 라이브러리에 비하면 자동화 부분이 조금 부족합니다. 예를 들어 파일 시스템의 일반 파일에 대한 웹서비스 처리도 직접 만들어야 합니다. 물론, 대부분 필요한 기능은 예제 소스를 참고하면 어렵지 않게 구현할 수 있습니다. 하지만 제 생각에는, 웹서버 라이브러리가 너무 많은 기능을 자동화하지 않는게 오히려 더 맞다고 생각하는데, 왜냐하면 대부분 응용 프로그램에서 웹서버를 내장하는 경우는 특수한 용도(RESTful / SOAP)이거나 필요한 기능만 구현하기 위해서이기 때문에 나머지는 모두 개발자가 제어하는게 라이브러리의 제 역할이 아닌가 생각합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>0MQ: 메시지 시스템 라이브러리</title>
      <link>https://lethean.github.io/2010/01/29/0mq-a-new-approach-to-messaging/</link>
      <pubDate>Fri, 29 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2010/01/29/0mq-a-new-approach-to-messaging/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://lwn.net/Articles/370307/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LWN.net&lt;/a&gt;
에서 
&lt;a href=&#34;http://www.zeromq.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;0MQ&lt;/a&gt;
라는 매우 흥미로운 라이브러리를 소개하길래 조금 자세히 살펴 보았습니다.&lt;/p&gt;
&lt;p&gt;일단 소개부터 하자면, BSD 소켓 비슷한 API를 지원하는 경량 메시지 시스템입니다. 소켓 비슷한 API라고 하지만, 소켓보다 사용하기 훨씬 편합니다. 실행 중 차지하는 용량이 1~20 KB 정도밖에 안될 뿐 아니라, 처음 개발이 실시간 증권 정보 시스템의 일부였기 때문인지 매우 빠릅니다. 네트워크 프로토콜은 TCP, UDP, 
&lt;a href=&#34;http://en.wikipedia.org/wiki/Pragmatic_General_Multicast&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PGM(Pragmatic General Multicast)&lt;/a&gt;
, IPC는 물론 쓰레드간 통신도 지원합니다. 지원하는 메시징 모델은 일대일 통신에 유용한 요청/응답(request/reply), 일대다 통신에 좋은 출판/가입(publish/subscribe), 스트리밍(streaming) 등을 지원합니다.&lt;/p&gt;
&lt;p&gt;대신 이 라이브러리는 메시지 내용 자체에는 관여하지 않습니다. 메시지 내용은 단순한 바이너리 데이터로 취급하기 때문에 개발자가 직접 정의하거나 
&lt;a href=&#34;http://code.google.com/apis/protocolbuffers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;구글 프로토콜 버퍼&lt;/a&gt;
 같은 전용 라이브러리를 사용해야 합니다. (참고로 구글 프로토콜 버퍼는 좋은 라이브러리이지만,  C++, Java, Python만 지원하고 정작 제가 사용하는 주언어인 C 언어는 지원하지 않아 검토만 하고 실제 프로젝트에서는 사용해 본 적이 없습니다) 즉, 인증 / 암호화 / 압축 / 시리얼라이제이션 등은 개발자가 알아서 하면 됩니다.&lt;/p&gt;
&lt;p&gt;다양한 언어와 플랫폼을 지원하기 때문에 어떤 프로젝트에서도 향후 확장성이나 호환성을 걱정하지 않고 사용할 수 있습니다. 지원하는 운영체제는  Linux, Windows, Mac OS X, Solaris, AIX, FreeBSD, HP-UX, OpenBSD, OpenVMS, QNX Neutrino 등이고, 아키텍쳐는 i386, x86-64, Sparc, Itanium, Alpha, ARM 등입니다.  사용 가능한 언어는 현재 C, C++, Common Lisp, Java, Python, Ruby 등인데 PHP 같은 웹 개발 언어까지 가능하다면 금상첨화일 것 같습니다.&lt;/p&gt;
&lt;p&gt;아직 직접 사용해보진 않았으나 긍정적으로 다음 프로젝트 또는 기능 추가시 사용해볼 예정인데, 몇 가지 이유를 적어보면 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;멀티플랫폼을 고려해야 하는 프로젝트에서는 모듈간 통신에 어쩔 수 없이 가장 일반적인 TCP/UDP 소켓을 사용합니다. 그런데 아무리 경험많은 개발자라도 매번 통신 모듈을 새로 개발하는 것은 부담스러운데, 이 라이브러리는 이런 고민을 말끔히 해결해주는 동시에 다양한 메시징 모델을 이용하여  응용 프로그램 자체에만 전념할 수 있게 도와줍니다.&lt;/li&gt;
&lt;li&gt;네트워크 상의 클라이언트-서버 방식 뿐 아니라, 하나의 시스템이 여러 역할별로 프로세스가 할당되어 구성되는 경우도 많습니다. 이 경우 성능을 위해 IPC나 PGM 등과 같은 프로토콜을 사용하다가, 나중에 분산 시스템으로 구성이 변경되더라도 프로토콜만 다시 TCP로 바꾸어 주면 되기 때문에 확장성이 매우 좋습니다. 또한 LWN.net 기사에서도 언급한 것처럼 게이트웨이나 프록시 역할을 하는 기능을 추가하는 것도 매우 쉬어집니다. 이를 응용할 수 있는 것도 매우 많아지는데, 예를 들어 사용자가 여러번 프로그램을 실행해도 한 개의 인스턴스만 존재하도록 하고 싶을때, 간단하게 IPC나 루프백 통신을 이용해 인스턴스 여부를 검사하면 되고, 더 나아가 기존 인스턴스에게 인자를 넘겨주는 것도 가능합니다. (
&lt;a href=&#34;http://live.gnome.org/LibUnique&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unique&lt;/a&gt;
 라이브러리 참고)&lt;/li&gt;
&lt;li&gt;게다가 이 라이브러리에서 지원하는 쓰레드간 통신을 이용하면, 물론 뮤텍스나 큐를 사용하는게 더 효율이 좋겠지만, 처음에는 쓰레드로 만들었다가 여러가지 이유로 나중에 프로세스로 분리하거나, 아예 다른 호스트에서 네트워크로 통신해야할 경우에도 쉽게 이전이 가능합니다. 또한 큐는 단순한 일대일 통신에만 사용할 수 있지만, 출판/가입 모델 등과 같이 한 쓰레드가 여러 쓰레드에게 메시지를 전송하는 경우(예를 들어 버스 또는 시그널 방송)도 쉽게 구현할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;a href=&#34;http://lwn.net/Articles/370307/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LWN.net&lt;/a&gt;
 페이지를 보시면 각 언어별로 샘플 코드가 나열되어 있으므로 기본적인 사용법이 궁금하신 분은 직접 확인해보시기 바랍니다. 아, 물론 LGPL 오픈소스입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Power of 10: 안전성이 중요한 코드 개발을 위한 규칙</title>
      <link>https://lethean.github.io/2010/01/25/power-of-10-rules-for-developing-safety-critical-code/</link>
      <pubDate>Mon, 25 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2010/01/25/power-of-10-rules-for-developing-safety-critical-code/</guid>
      <description>&lt;p&gt;`
&lt;a href=&#34;http://www.embedded.com/design/222301487&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;정적 분석과 코딩 규칙을 이용한 임베디드 소프트웨어 버그 줄이기&lt;/a&gt;
&amp;lsquo;라는 제목의 기사를 읽다가 `
&lt;a href=&#34;http://spinroot.com/gerard/pdf/Power_of_Ten.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Power of 10&lt;/a&gt;
&amp;rsquo; 규칙이 언급되었길래 다시 읽어볼 기회가 생겼습니다. 기사 내용은 필자가 개발한 정적 분석 도구 제품을 홍보하는 느낌을 받았지만, 어느 정도의 가이드라인을 지킨 코드는 정적 분석 도구의 도움을 받아 미리 오류를 발견하고 수정하기가 더 쉽기 때문에 상호 보완하는 것이 좋다는 점에는 동의합니다. 아무튼 기사와는 별도로, 십제곱(?) 규칙은 다시 읽어도 나름대로 곱씹을 가치가 있는 것 같아 우리말로 다시 정리해 보았습니다.&lt;/p&gt;
&lt;p&gt;대부분 소프트웨어 프로젝트는 나름의 코딩 가이드라인을 사용합니다. 가이드라인은 프로그래머가 소프트웨어를 만들때 어떻게 구성할지, 언어의 어떤 특징을 사용하고 사용하면 안되는지 등을 규정합니다. 하지만 수많은 코딩 가이드라인이 대부분 비슷하고, 너무 규칙이 많거나 모호한 경우도 많습니다. 때로는 공백문자 사용법 등과 같은 개인적인 취향을 반영하기도 합니다. 결과적으로 이러한 코딩 가이드라인은 개발자가 코드를 작성할때 별로 영향을 끼치지 못하곤 합니다. 더 나아가 도구를 사용하여 검사하는 작업과 병행하기 어렵게 하기도 합니다. 도구를 사용하여 검사하는 과정은 중요한데, 수십만 라인의 코드를 직접 검토하는 작업은 불가능하기 때문입니다.&lt;/p&gt;
&lt;p&gt;따라서 좋은 코딩 가이드라인은 분량이 적고, 사람들이 쉽게 이해하고 기억할 수 있도록 명료해야 합니다. 그래서 저자는 10개의 효율적이고 규칙을 제안합니다. 이 가이드라인은 임베디드 소프트웨어 개발에 오랫동안 널리 사용해 온 C 언어를 대상으로 합니다. (참고로 저자는 NASA의 JPL(Jet Propulsion Lab.)에 근무하면서 고신뢰 소프트웨어 개발을 연구하는 분입니다)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 1: 단순하게 제어 흐름(control flow)을 구성하고 goto, setjmp(), longjump(), 재귀(recursion) 사용 안하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;제어 흐름이 단순할수록 더 튼튼하고 분석이 용이하며 코드를 명료하게 합니다. 재귀를 없애면 순환하는 호출 그래프를 없앨 수 있고, 그로 인해 스택 오버플로우 등을 걱정할 필요도 없습니다. 그렇다고 이 규칙이 모든 함수가 단일점에서 복귀(return)해야 한다는 건 아닙니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 2: 루프에서 상한값을 고정하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;검사 도구가 쉽게 분석할 수 있을 뿐 아니라, 재귀를 피하는 규칙과 더불어 이 규칙을 따르면 무한루프처럼 폭주하는 코드를 걱정할 필요가 없습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 3: 초기화 이후 동적 메모리 할당 사용 한하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;많은 가이드라인에 포함되어 있는 규칙인데, 이유는 명료합니다. 동적 메모리 할당 함수는 성능에 심각한 영향을 끼칠 뿐 아니라 실수로 인한 메모리 누수는 시스템을 심각한 상태에  빠뜨릴 수 있기 때문입니다. 필요하다면 alloca() 등과 같은 스택 기반 동적 할당은 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 4: 함수 하나가 출력시 한 페이지를 넘어가지 않도록 제한하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;함수를 더 쉽게 이해하고 검증할 수 있는 단위로 나누기 위해 필요합니다. 함수가 길어질수록 논리적으로 잘 구조화된 코드를 작성하기 어렵습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 5: 함수에 최소 2개 이상의 단언문(assert) 사용하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;최종 빌드시 비활성화될 수 있는 단언문은 개발 도중 많이 사용할 수록 좋습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 6: 자료 객체는 가능한 가장 작은 범위(scope)에서 선언하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;정보 은닉(information hiding) 원칙에 따라, 불필요하게 변수의 범위를 확장하지 않으면 잘못 참조해서 발생하는 오류를 줄일 수 있습니다. 또한 변수 재사용을 막아서, 코드를 더 정확하게 분석하고 구조화할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 7: 결과값을 돌려주는 함수의 결과값을 반드시 확인하고, 함수에 전달된 모든 인수가 유효한지 확인하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;가장 지켜지지 않는 규칙 중 하나입니다. printf(), scanf(), close() 등의 결과값을 검사하지 않는 사람도 대부분이지만, 검사하는 것이 맞습니다. 결과값이 맞던 틀리던 상관없더라도 반드시 각 조건에 해당하는 처리 코드가 있어야 하며, 분명히 인지하고 있다면 명시적으로 함수 결과값을 (void) 문을 이용해 형변환해서 무시해야 합니다. 하지만 에러값을 돌려주는 함수는 반드시 무조건 검사해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 8: 매크로는 파일을 포함하거나(include) 단순하게 정의할 때만 사용하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C 전처리기는 강력하기 때문에, 그만큼 코드를 복잡하게 만듭니다. 그래서 정적 분석 도구는 물론 사람 역시 코드를 분석하고 이해하려면 매우 많은 노력이 필요하고, 이는 결과적으로 불안정하고 불확실한 코드를 생성하는 주범이 될 수 있습니다. 특히 조건 컴파일을 사용하면 코드 복잡도가 사용하는 회수만큼 높아지기 때문에 가능하면 피해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 9: 포인터 사용 안하기, 필요하더라도 1단계 이상 참조하는 포인터는 절대 사용 안하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;typedef 선언을 이용해 2단계 이상 포인터 참조를 숨겨서도 안됩니다. 포인터는 경험많은 프로그래머라도 오용하기 쉽고, 프로그램에서 데이터 흐름을 따라가기 어렵게 합니다. 함수 포인터 역시 가능하면 사용하지 않는 것이 좋은데, 분석 도구를 사용하더라도, 포인터 유효성, 재귀 호출의 위험 등을 미리 알 수 있는 방법이 어렵기 때문입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;규칙 10: 컴파일시 모든 경고 메시지를 켜고, 모든 코드가 경고 없이 컴파일되도록 하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;컴파일러 역시 하나의 분석 도구라고 간주할 수 있습니다. 컴파일러가 혼란을 일으키는 코드라면 반드시 실행 중에 문제를 일으킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;물론 위 규칙을 모든 소프트웨어 개발에 적용할 수는 없겠지만, 항상 염두에 두고 있다면, 비단 임베디드 시스템 개발 뿐 아니라 모든 소프트웨어 개발 과정에서 오류를 미리 예방하는데 도움될 것이라는 점은 분명한 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>X10 프로토콜 이용한 홈 오토메이션</title>
      <link>https://lethean.github.io/2006/07/03/home-automation-using-x10/</link>
      <pubDate>Mon, 03 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/07/03/home-automation-using-x10/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://www-128.ibm.com/developerworks/library/l-lobx10.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(원문 : Linux on board: This old box: Home automation using X10)&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;이 글은 전력선(power lines) 위로 데이터를 전송하는데 이용하는 X10 프로토콜을 이용하여 다른 가전 제품을 제어하는 방법을 설명하고 있다. X10 프로토콜은 네트웍으로 사용하기에는 느리지만, 간단하게 원격으로 제품을 제어하는데는 충분하다고 한다. 물론 제어하려는 장치가 X10 프로토콜을 지원해야 하고, X10 프로토콜은 시리얼이나 USB 방식으로 변환되어 들어오기 때문에 별도의 드라이버 없이 프로토콜만 이해하면 프로그래밍이 가능하다.&lt;/p&gt;
&lt;p&gt;이 글에서는 기본적인 작업을 하는 프로그램을 몇가지 셸 코드와 조합하여 cron 등을 이용하여 주기적으로 제어하는 예제를 보여주고 있다. &amp;lsquo;하우스 코드, 유닛 코드, 기능 코드&amp;rsquo; 로 구성된 패킷을 브로드캐스트(broadcast) 방식으로 송신하고, 각 장비들은 자신에게 맞는 코드가 도착했을 경우 이를 받아들여 처리하는 방식이다. 인증이나 다른 복잡한 과정이 필요없기 때문에 프로그래밍도 매우 간단하다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CELF 2006 컨퍼런스</title>
      <link>https://lethean.github.io/2006/05/09/celf-2006-conference/</link>
      <pubDate>Tue, 09 May 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/05/09/celf-2006-conference/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://linuxdevices.com/articles/AT8247255296.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CELF 2006&lt;/a&gt;
 컨퍼런스에서 공개된 여러 
&lt;a href=&#34;http://free-electrons.com/community/videos/conferences/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;슬라이드 자료&lt;/a&gt;
에서 관심있는 몇 가지를 요약해 본다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;Visualizing Resource Usage During Initialization of Embedded Systems&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Bootchart를 임베디드 시스템에 적용하여 임베디드 리눅스 부팅 속도 측정 및 지연 부분을 찾아내는 과정을 보여준다. 더불어 기존 Bootchart의 처리 방식이 저성능 CPU에서는 비효율적이라서 리소스를 적게 차지하도록 새로 개선하는 방법도 소개한다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;Graphics Subsystem in an Embedded World - Integrating DirectFB into a UHAPI platform&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;스트리밍 장비 표준 미들웨어 API인 
&lt;a href=&#34;http://www.uhapi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UHAPI&lt;/a&gt;
를 
&lt;a href=&#34;http://directfb.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DirectFB&lt;/a&gt;
에서 지원하기 위한 기본 지식과 그 과정을 보여준다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;Low Disturbance Embedded System Tracing with Linux Trace Toolkit Next Generation&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.opersys.com/LTT/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LTTng&lt;/a&gt;
를 이용하여 인터럽트 응답시간을 저해하는 요소를 찾아내는 과정을 설명한다&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;Analysis of User Level Device Driver usability in embedded application&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;임베디드 시스템은 일반적인 서버나 PC와 달리 항상 새로운 디바이스를 사용하는 경우가 대부분이고 일반적인 용도라기보다 하나의 전용 어플리케이션에 맞추어 동작하는 경우가 대부분이다. 이 글에서는 사용자 레벨 디바이스 드라이버, 즉 일반 어플리케이션 방식으로 드라이버를 제작하는 방식을 제시하고 있다. 새로운 개념이라기보다는 이미 존재하는 mmap(), fasync() 등을 이용하여 DMA, IO 영역, 인터럽트 처리 방법을 보여주고 여러가지 커널 설정에서 성능을 비교해주고 있다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;Embedded Linux Optimizations - Size, RAM, speed, power, cost&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://free-electrons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Free Electrons&lt;/a&gt;
의 강의 시리즈 중에 하나로 보이는 이 자료는, 임베디드 리눅스의 부팅 속도, 메모리 사용크기, 속도, 전원 절약 등 실제 업무에 활용가능한 여러가지 기법을 잘 정리하고 있다. 최신 기술은 물론 고전적인 방식까지 일목요연하게 잘 정리된 것 같다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>임베디드 시스템에 오픈 소스를 사용하면 좋은 이유</title>
      <link>https://lethean.github.io/2006/01/12/advantages-of-free-software-and-open-source-in-embedded-systems/</link>
      <pubDate>Thu, 12 Jan 2006 00:00:00 +0000</pubDate>
      <guid>https://lethean.github.io/2006/01/12/advantages-of-free-software-and-open-source-in-embedded-systems/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://free-electrons.com/articles/reasons/en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;임베디드 시스템에 오픈 소스를 사용하면 좋은 이유(Advantages of Free Software and Open Source in embedded systems)&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;이 자료는 임베디드 시스템 개발에 오픈 소스를 이용해야 하는 이유를 조목 조목 나열하며 설명하고 있다. 총 49페이지 분량으로 되어 있으며, 임베디드 시스템 개발자 / 관리자 / 회사 / 컨텐트 공급자 / 고객과 최종 사용자별로 나누어 장점을 설명하고 있다. 그와 더불어 오픈 소스에 대한 오해와 어려움, 단점 등도 요약하고 있다. 이 중에서 장점 부분은 분량도 많고 누구나 예상할 수 있는 내용이라 생략하고, 그 외적인 부분만 따로 정리해 본다.&lt;/p&gt;
&lt;p&gt;이 자료에서 밝히는 오픈 소스에 대한 첫번째 오해는, &lt;span style=&#34;font-weight:bold;&#34;&gt;&amp;ldquo;내 코드를 세상에 무조건 공개해야 한다&amp;rdquo;&lt;/span&gt;는 생각이다. 이는 GPL(LGPL이 아닌) 등과 같은 카피레프트(Copyleft) 라이브러리를 사용하거나, 이러한 프로그램을 수정하여 확장할 경우에만 그렇다. 두번째 오해는 &lt;span style=&#34;font-weight:bold;&#34;&gt;&amp;ldquo;지원이나 교육을 받을 수 없다&amp;rdquo;&lt;/span&gt;인데, 수많은 교육기관에서 강의를 받는 것은 물론 많은 회사로부터 기술지원을 받는 것이 가능하다.&lt;/p&gt;
&lt;p&gt;기술적인 어려움은 다음과 같은 항목을 나열하고 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;오픈 소스는 자주 업그레이드되고 갱신되므로 변경사항을 관리해야 한다. 따라서 가능한 초기에 컴포넌트를 고정(freeze)해야 한다.&lt;/li&gt;
&lt;li&gt;솔루션이 너무 많아 선택하기 힘들다. 마치 모래에서 사금을 채취하는 것과도 비슷하기에, 모든 솔루션을 검토하고 오픈 소스 소식을 따라가기에 시간이 부족하다. 이 경우 전문가의 조언을 구하는 것이 필요하다.&lt;/li&gt;
&lt;li&gt;길게 지속되는 솔루션이 필요하다. 많은 사용자와 개발자가 있고 커뮤니티가 형성되어 활발하게 개발되고 있는지도 중요하다.&lt;/li&gt;
&lt;li&gt;개발에 필요한 문서, 소스 등이 산재해 있어 웹 검색에 경험이 필요하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 외에도 몇 가지 내용이 더 있지만, 여기까지만 정리한다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
